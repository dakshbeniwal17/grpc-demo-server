// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SensorModel is an object representing the database table.
type SensorModel struct {
	ID           string       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name         null.String  `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`
	Description  null.String  `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`
	WarningTemp  null.Float64 `boil:"warning_temp" json:"warning_temp,omitempty" toml:"warning_temp" yaml:"warning_temp,omitempty"`
	CriticalTemp null.Float64 `boil:"critical_temp" json:"critical_temp,omitempty" toml:"critical_temp" yaml:"critical_temp,omitempty"`
	SensorNo     null.Int     `boil:"sensor_no" json:"sensor_no,omitempty" toml:"sensor_no" yaml:"sensor_no,omitempty"`

	R *sensorModelR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sensorModelL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SensorModelColumns = struct {
	ID           string
	Name         string
	Description  string
	WarningTemp  string
	CriticalTemp string
	SensorNo     string
}{
	ID:           "id",
	Name:         "name",
	Description:  "description",
	WarningTemp:  "warning_temp",
	CriticalTemp: "critical_temp",
	SensorNo:     "sensor_no",
}

var SensorModelTableColumns = struct {
	ID           string
	Name         string
	Description  string
	WarningTemp  string
	CriticalTemp string
	SensorNo     string
}{
	ID:           "sensor_models.id",
	Name:         "sensor_models.name",
	Description:  "sensor_models.description",
	WarningTemp:  "sensor_models.warning_temp",
	CriticalTemp: "sensor_models.critical_temp",
	SensorNo:     "sensor_models.sensor_no",
}

// Generated where

var SensorModelWhere = struct {
	ID           whereHelperstring
	Name         whereHelpernull_String
	Description  whereHelpernull_String
	WarningTemp  whereHelpernull_Float64
	CriticalTemp whereHelpernull_Float64
	SensorNo     whereHelpernull_Int
}{
	ID:           whereHelperstring{field: "\"sensor_models\".\"id\""},
	Name:         whereHelpernull_String{field: "\"sensor_models\".\"name\""},
	Description:  whereHelpernull_String{field: "\"sensor_models\".\"description\""},
	WarningTemp:  whereHelpernull_Float64{field: "\"sensor_models\".\"warning_temp\""},
	CriticalTemp: whereHelpernull_Float64{field: "\"sensor_models\".\"critical_temp\""},
	SensorNo:     whereHelpernull_Int{field: "\"sensor_models\".\"sensor_no\""},
}

// SensorModelRels is where relationship names are stored.
var SensorModelRels = struct {
}{}

// sensorModelR is where relationships are stored.
type sensorModelR struct {
}

// NewStruct creates a new relationship struct
func (*sensorModelR) NewStruct() *sensorModelR {
	return &sensorModelR{}
}

// sensorModelL is where Load methods for each relationship are stored.
type sensorModelL struct{}

var (
	sensorModelAllColumns            = []string{"id", "name", "description", "warning_temp", "critical_temp", "sensor_no"}
	sensorModelColumnsWithoutDefault = []string{}
	sensorModelColumnsWithDefault    = []string{"id", "name", "description", "warning_temp", "critical_temp", "sensor_no"}
	sensorModelPrimaryKeyColumns     = []string{"id"}
	sensorModelGeneratedColumns      = []string{}
)

type (
	// SensorModelSlice is an alias for a slice of pointers to SensorModel.
	// This should almost always be used instead of []SensorModel.
	SensorModelSlice []*SensorModel
	// SensorModelHook is the signature for custom SensorModel hook methods
	SensorModelHook func(context.Context, boil.ContextExecutor, *SensorModel) error

	sensorModelQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sensorModelType                 = reflect.TypeOf(&SensorModel{})
	sensorModelMapping              = queries.MakeStructMapping(sensorModelType)
	sensorModelPrimaryKeyMapping, _ = queries.BindMapping(sensorModelType, sensorModelMapping, sensorModelPrimaryKeyColumns)
	sensorModelInsertCacheMut       sync.RWMutex
	sensorModelInsertCache          = make(map[string]insertCache)
	sensorModelUpdateCacheMut       sync.RWMutex
	sensorModelUpdateCache          = make(map[string]updateCache)
	sensorModelUpsertCacheMut       sync.RWMutex
	sensorModelUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sensorModelAfterSelectHooks []SensorModelHook

var sensorModelBeforeInsertHooks []SensorModelHook
var sensorModelAfterInsertHooks []SensorModelHook

var sensorModelBeforeUpdateHooks []SensorModelHook
var sensorModelAfterUpdateHooks []SensorModelHook

var sensorModelBeforeDeleteHooks []SensorModelHook
var sensorModelAfterDeleteHooks []SensorModelHook

var sensorModelBeforeUpsertHooks []SensorModelHook
var sensorModelAfterUpsertHooks []SensorModelHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SensorModel) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sensorModelAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SensorModel) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sensorModelBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SensorModel) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sensorModelAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SensorModel) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sensorModelBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SensorModel) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sensorModelAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SensorModel) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sensorModelBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SensorModel) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sensorModelAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SensorModel) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sensorModelBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SensorModel) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sensorModelAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSensorModelHook registers your hook function for all future operations.
func AddSensorModelHook(hookPoint boil.HookPoint, sensorModelHook SensorModelHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sensorModelAfterSelectHooks = append(sensorModelAfterSelectHooks, sensorModelHook)
	case boil.BeforeInsertHook:
		sensorModelBeforeInsertHooks = append(sensorModelBeforeInsertHooks, sensorModelHook)
	case boil.AfterInsertHook:
		sensorModelAfterInsertHooks = append(sensorModelAfterInsertHooks, sensorModelHook)
	case boil.BeforeUpdateHook:
		sensorModelBeforeUpdateHooks = append(sensorModelBeforeUpdateHooks, sensorModelHook)
	case boil.AfterUpdateHook:
		sensorModelAfterUpdateHooks = append(sensorModelAfterUpdateHooks, sensorModelHook)
	case boil.BeforeDeleteHook:
		sensorModelBeforeDeleteHooks = append(sensorModelBeforeDeleteHooks, sensorModelHook)
	case boil.AfterDeleteHook:
		sensorModelAfterDeleteHooks = append(sensorModelAfterDeleteHooks, sensorModelHook)
	case boil.BeforeUpsertHook:
		sensorModelBeforeUpsertHooks = append(sensorModelBeforeUpsertHooks, sensorModelHook)
	case boil.AfterUpsertHook:
		sensorModelAfterUpsertHooks = append(sensorModelAfterUpsertHooks, sensorModelHook)
	}
}

// One returns a single sensorModel record from the query.
func (q sensorModelQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SensorModel, error) {
	o := &SensorModel{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sensor_models")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SensorModel records from the query.
func (q sensorModelQuery) All(ctx context.Context, exec boil.ContextExecutor) (SensorModelSlice, error) {
	var o []*SensorModel

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SensorModel slice")
	}

	if len(sensorModelAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SensorModel records in the query.
func (q sensorModelQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sensor_models rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sensorModelQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sensor_models exists")
	}

	return count > 0, nil
}

// SensorModels retrieves all the records using an executor.
func SensorModels(mods ...qm.QueryMod) sensorModelQuery {
	mods = append(mods, qm.From("\"sensor_models\""))
	return sensorModelQuery{NewQuery(mods...)}
}

// FindSensorModel retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSensorModel(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*SensorModel, error) {
	sensorModelObj := &SensorModel{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"sensor_models\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, sensorModelObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sensor_models")
	}

	if err = sensorModelObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sensorModelObj, err
	}

	return sensorModelObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SensorModel) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sensor_models provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sensorModelColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sensorModelInsertCacheMut.RLock()
	cache, cached := sensorModelInsertCache[key]
	sensorModelInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sensorModelAllColumns,
			sensorModelColumnsWithDefault,
			sensorModelColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sensorModelType, sensorModelMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sensorModelType, sensorModelMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"sensor_models\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"sensor_models\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sensor_models")
	}

	if !cached {
		sensorModelInsertCacheMut.Lock()
		sensorModelInsertCache[key] = cache
		sensorModelInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SensorModel.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SensorModel) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sensorModelUpdateCacheMut.RLock()
	cache, cached := sensorModelUpdateCache[key]
	sensorModelUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sensorModelAllColumns,
			sensorModelPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sensor_models, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"sensor_models\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, sensorModelPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sensorModelType, sensorModelMapping, append(wl, sensorModelPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sensor_models row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sensor_models")
	}

	if !cached {
		sensorModelUpdateCacheMut.Lock()
		sensorModelUpdateCache[key] = cache
		sensorModelUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sensorModelQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sensor_models")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sensor_models")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SensorModelSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sensorModelPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"sensor_models\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, sensorModelPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sensorModel slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sensorModel")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SensorModel) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sensor_models provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sensorModelColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sensorModelUpsertCacheMut.RLock()
	cache, cached := sensorModelUpsertCache[key]
	sensorModelUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sensorModelAllColumns,
			sensorModelColumnsWithDefault,
			sensorModelColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sensorModelAllColumns,
			sensorModelPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert sensor_models, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(sensorModelPrimaryKeyColumns))
			copy(conflict, sensorModelPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"sensor_models\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(sensorModelType, sensorModelMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sensorModelType, sensorModelMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert sensor_models")
	}

	if !cached {
		sensorModelUpsertCacheMut.Lock()
		sensorModelUpsertCache[key] = cache
		sensorModelUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SensorModel record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SensorModel) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SensorModel provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sensorModelPrimaryKeyMapping)
	sql := "DELETE FROM \"sensor_models\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sensor_models")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sensor_models")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sensorModelQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sensorModelQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sensor_models")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sensor_models")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SensorModelSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sensorModelBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sensorModelPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"sensor_models\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, sensorModelPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sensorModel slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sensor_models")
	}

	if len(sensorModelAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SensorModel) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSensorModel(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SensorModelSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SensorModelSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sensorModelPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"sensor_models\".* FROM \"sensor_models\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, sensorModelPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SensorModelSlice")
	}

	*o = slice

	return nil
}

// SensorModelExists checks if the SensorModel row exists.
func SensorModelExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"sensor_models\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sensor_models exists")
	}

	return exists, nil
}
