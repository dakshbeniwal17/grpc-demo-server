// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// GpuModel is an object representing the database table.
type GpuModel struct {
	ID               string       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Vram             null.Float64 `boil:"vram" json:"vram,omitempty" toml:"vram" yaml:"vram,omitempty"`
	OctaneBenchScore null.Int     `boil:"octane_bench_score" json:"octane_bench_score,omitempty" toml:"octane_bench_score" yaml:"octane_bench_score,omitempty"`
	GpuNo            null.Int     `boil:"gpu_no" json:"gpu_no,omitempty" toml:"gpu_no" yaml:"gpu_no,omitempty"`
	SlotNo           null.Int     `boil:"slot_no" json:"slot_no,omitempty" toml:"slot_no" yaml:"slot_no,omitempty"`
	Available        null.Int     `boil:"available" json:"available,omitempty" toml:"available" yaml:"available,omitempty"`
	VramFree         null.Float64 `boil:"vram_free" json:"vram_free,omitempty" toml:"vram_free" yaml:"vram_free,omitempty"`
	Updated          null.Time    `boil:"updated" json:"updated,omitempty" toml:"updated" yaml:"updated,omitempty"`

	R *gpuModelR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L gpuModelL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var GpuModelColumns = struct {
	ID               string
	Vram             string
	OctaneBenchScore string
	GpuNo            string
	SlotNo           string
	Available        string
	VramFree         string
	Updated          string
}{
	ID:               "id",
	Vram:             "vram",
	OctaneBenchScore: "octane_bench_score",
	GpuNo:            "gpu_no",
	SlotNo:           "slot_no",
	Available:        "available",
	VramFree:         "vram_free",
	Updated:          "updated",
}

var GpuModelTableColumns = struct {
	ID               string
	Vram             string
	OctaneBenchScore string
	GpuNo            string
	SlotNo           string
	Available        string
	VramFree         string
	Updated          string
}{
	ID:               "gpu_models.id",
	Vram:             "gpu_models.vram",
	OctaneBenchScore: "gpu_models.octane_bench_score",
	GpuNo:            "gpu_models.gpu_no",
	SlotNo:           "gpu_models.slot_no",
	Available:        "gpu_models.available",
	VramFree:         "gpu_models.vram_free",
	Updated:          "gpu_models.updated",
}

// Generated where

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var GpuModelWhere = struct {
	ID               whereHelperstring
	Vram             whereHelpernull_Float64
	OctaneBenchScore whereHelpernull_Int
	GpuNo            whereHelpernull_Int
	SlotNo           whereHelpernull_Int
	Available        whereHelpernull_Int
	VramFree         whereHelpernull_Float64
	Updated          whereHelpernull_Time
}{
	ID:               whereHelperstring{field: "\"gpu_models\".\"id\""},
	Vram:             whereHelpernull_Float64{field: "\"gpu_models\".\"vram\""},
	OctaneBenchScore: whereHelpernull_Int{field: "\"gpu_models\".\"octane_bench_score\""},
	GpuNo:            whereHelpernull_Int{field: "\"gpu_models\".\"gpu_no\""},
	SlotNo:           whereHelpernull_Int{field: "\"gpu_models\".\"slot_no\""},
	Available:        whereHelpernull_Int{field: "\"gpu_models\".\"available\""},
	VramFree:         whereHelpernull_Float64{field: "\"gpu_models\".\"vram_free\""},
	Updated:          whereHelpernull_Time{field: "\"gpu_models\".\"updated\""},
}

// GpuModelRels is where relationship names are stored.
var GpuModelRels = struct {
	GpuHostGpus string
}{
	GpuHostGpus: "GpuHostGpus",
}

// gpuModelR is where relationships are stored.
type gpuModelR struct {
	GpuHostGpus HostGpuSlice `boil:"GpuHostGpus" json:"GpuHostGpus" toml:"GpuHostGpus" yaml:"GpuHostGpus"`
}

// NewStruct creates a new relationship struct
func (*gpuModelR) NewStruct() *gpuModelR {
	return &gpuModelR{}
}

// gpuModelL is where Load methods for each relationship are stored.
type gpuModelL struct{}

var (
	gpuModelAllColumns            = []string{"id", "vram", "octane_bench_score", "gpu_no", "slot_no", "available", "vram_free", "updated"}
	gpuModelColumnsWithoutDefault = []string{}
	gpuModelColumnsWithDefault    = []string{"id", "vram", "octane_bench_score", "gpu_no", "slot_no", "available", "vram_free", "updated"}
	gpuModelPrimaryKeyColumns     = []string{"id"}
	gpuModelGeneratedColumns      = []string{}
)

type (
	// GpuModelSlice is an alias for a slice of pointers to GpuModel.
	// This should almost always be used instead of []GpuModel.
	GpuModelSlice []*GpuModel
	// GpuModelHook is the signature for custom GpuModel hook methods
	GpuModelHook func(context.Context, boil.ContextExecutor, *GpuModel) error

	gpuModelQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	gpuModelType                 = reflect.TypeOf(&GpuModel{})
	gpuModelMapping              = queries.MakeStructMapping(gpuModelType)
	gpuModelPrimaryKeyMapping, _ = queries.BindMapping(gpuModelType, gpuModelMapping, gpuModelPrimaryKeyColumns)
	gpuModelInsertCacheMut       sync.RWMutex
	gpuModelInsertCache          = make(map[string]insertCache)
	gpuModelUpdateCacheMut       sync.RWMutex
	gpuModelUpdateCache          = make(map[string]updateCache)
	gpuModelUpsertCacheMut       sync.RWMutex
	gpuModelUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var gpuModelAfterSelectHooks []GpuModelHook

var gpuModelBeforeInsertHooks []GpuModelHook
var gpuModelAfterInsertHooks []GpuModelHook

var gpuModelBeforeUpdateHooks []GpuModelHook
var gpuModelAfterUpdateHooks []GpuModelHook

var gpuModelBeforeDeleteHooks []GpuModelHook
var gpuModelAfterDeleteHooks []GpuModelHook

var gpuModelBeforeUpsertHooks []GpuModelHook
var gpuModelAfterUpsertHooks []GpuModelHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *GpuModel) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gpuModelAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *GpuModel) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gpuModelBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *GpuModel) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gpuModelAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *GpuModel) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gpuModelBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *GpuModel) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gpuModelAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *GpuModel) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gpuModelBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *GpuModel) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gpuModelAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *GpuModel) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gpuModelBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *GpuModel) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gpuModelAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddGpuModelHook registers your hook function for all future operations.
func AddGpuModelHook(hookPoint boil.HookPoint, gpuModelHook GpuModelHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		gpuModelAfterSelectHooks = append(gpuModelAfterSelectHooks, gpuModelHook)
	case boil.BeforeInsertHook:
		gpuModelBeforeInsertHooks = append(gpuModelBeforeInsertHooks, gpuModelHook)
	case boil.AfterInsertHook:
		gpuModelAfterInsertHooks = append(gpuModelAfterInsertHooks, gpuModelHook)
	case boil.BeforeUpdateHook:
		gpuModelBeforeUpdateHooks = append(gpuModelBeforeUpdateHooks, gpuModelHook)
	case boil.AfterUpdateHook:
		gpuModelAfterUpdateHooks = append(gpuModelAfterUpdateHooks, gpuModelHook)
	case boil.BeforeDeleteHook:
		gpuModelBeforeDeleteHooks = append(gpuModelBeforeDeleteHooks, gpuModelHook)
	case boil.AfterDeleteHook:
		gpuModelAfterDeleteHooks = append(gpuModelAfterDeleteHooks, gpuModelHook)
	case boil.BeforeUpsertHook:
		gpuModelBeforeUpsertHooks = append(gpuModelBeforeUpsertHooks, gpuModelHook)
	case boil.AfterUpsertHook:
		gpuModelAfterUpsertHooks = append(gpuModelAfterUpsertHooks, gpuModelHook)
	}
}

// One returns a single gpuModel record from the query.
func (q gpuModelQuery) One(ctx context.Context, exec boil.ContextExecutor) (*GpuModel, error) {
	o := &GpuModel{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for gpu_models")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all GpuModel records from the query.
func (q gpuModelQuery) All(ctx context.Context, exec boil.ContextExecutor) (GpuModelSlice, error) {
	var o []*GpuModel

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to GpuModel slice")
	}

	if len(gpuModelAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all GpuModel records in the query.
func (q gpuModelQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count gpu_models rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q gpuModelQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if gpu_models exists")
	}

	return count > 0, nil
}

// GpuHostGpus retrieves all the host_gpus's HostGpus with an executor via gpu column.
func (o *GpuModel) GpuHostGpus(mods ...qm.QueryMod) hostGpuQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"host_gpus\".\"gpu\"=?", o.ID),
	)

	query := HostGpus(queryMods...)
	queries.SetFrom(query.Query, "\"host_gpus\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"host_gpus\".*"})
	}

	return query
}

// LoadGpuHostGpus allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (gpuModelL) LoadGpuHostGpus(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGpuModel interface{}, mods queries.Applicator) error {
	var slice []*GpuModel
	var object *GpuModel

	if singular {
		object = maybeGpuModel.(*GpuModel)
	} else {
		slice = *maybeGpuModel.(*[]*GpuModel)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &gpuModelR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &gpuModelR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`host_gpus`),
		qm.WhereIn(`host_gpus.gpu in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load host_gpus")
	}

	var resultSlice []*HostGpu
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice host_gpus")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on host_gpus")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for host_gpus")
	}

	if len(hostGpuAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.GpuHostGpus = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &hostGpuR{}
			}
			foreign.R.GpuGpuModel = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.Gpu) {
				local.R.GpuHostGpus = append(local.R.GpuHostGpus, foreign)
				if foreign.R == nil {
					foreign.R = &hostGpuR{}
				}
				foreign.R.GpuGpuModel = local
				break
			}
		}
	}

	return nil
}

// AddGpuHostGpus adds the given related objects to the existing relationships
// of the gpu_model, optionally inserting them as new records.
// Appends related to o.R.GpuHostGpus.
// Sets related.R.GpuGpuModel appropriately.
func (o *GpuModel) AddGpuHostGpus(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*HostGpu) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Gpu, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"host_gpus\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"gpu"}),
				strmangle.WhereClause("\"", "\"", 2, hostGpuPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Gpu, o.ID)
		}
	}

	if o.R == nil {
		o.R = &gpuModelR{
			GpuHostGpus: related,
		}
	} else {
		o.R.GpuHostGpus = append(o.R.GpuHostGpus, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &hostGpuR{
				GpuGpuModel: o,
			}
		} else {
			rel.R.GpuGpuModel = o
		}
	}
	return nil
}

// SetGpuHostGpus removes all previously related items of the
// gpu_model replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.GpuGpuModel's GpuHostGpus accordingly.
// Replaces o.R.GpuHostGpus with related.
// Sets related.R.GpuGpuModel's GpuHostGpus accordingly.
func (o *GpuModel) SetGpuHostGpus(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*HostGpu) error {
	query := "update \"host_gpus\" set \"gpu\" = null where \"gpu\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.GpuHostGpus {
			queries.SetScanner(&rel.Gpu, nil)
			if rel.R == nil {
				continue
			}

			rel.R.GpuGpuModel = nil
		}

		o.R.GpuHostGpus = nil
	}
	return o.AddGpuHostGpus(ctx, exec, insert, related...)
}

// RemoveGpuHostGpus relationships from objects passed in.
// Removes related items from R.GpuHostGpus (uses pointer comparison, removal does not keep order)
// Sets related.R.GpuGpuModel.
func (o *GpuModel) RemoveGpuHostGpus(ctx context.Context, exec boil.ContextExecutor, related ...*HostGpu) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Gpu, nil)
		if rel.R != nil {
			rel.R.GpuGpuModel = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("gpu")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.GpuHostGpus {
			if rel != ri {
				continue
			}

			ln := len(o.R.GpuHostGpus)
			if ln > 1 && i < ln-1 {
				o.R.GpuHostGpus[i] = o.R.GpuHostGpus[ln-1]
			}
			o.R.GpuHostGpus = o.R.GpuHostGpus[:ln-1]
			break
		}
	}

	return nil
}

// GpuModels retrieves all the records using an executor.
func GpuModels(mods ...qm.QueryMod) gpuModelQuery {
	mods = append(mods, qm.From("\"gpu_models\""))
	return gpuModelQuery{NewQuery(mods...)}
}

// FindGpuModel retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindGpuModel(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*GpuModel, error) {
	gpuModelObj := &GpuModel{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"gpu_models\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, gpuModelObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from gpu_models")
	}

	if err = gpuModelObj.doAfterSelectHooks(ctx, exec); err != nil {
		return gpuModelObj, err
	}

	return gpuModelObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *GpuModel) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no gpu_models provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(gpuModelColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	gpuModelInsertCacheMut.RLock()
	cache, cached := gpuModelInsertCache[key]
	gpuModelInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			gpuModelAllColumns,
			gpuModelColumnsWithDefault,
			gpuModelColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(gpuModelType, gpuModelMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(gpuModelType, gpuModelMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"gpu_models\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"gpu_models\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into gpu_models")
	}

	if !cached {
		gpuModelInsertCacheMut.Lock()
		gpuModelInsertCache[key] = cache
		gpuModelInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the GpuModel.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *GpuModel) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	gpuModelUpdateCacheMut.RLock()
	cache, cached := gpuModelUpdateCache[key]
	gpuModelUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			gpuModelAllColumns,
			gpuModelPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update gpu_models, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"gpu_models\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, gpuModelPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(gpuModelType, gpuModelMapping, append(wl, gpuModelPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update gpu_models row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for gpu_models")
	}

	if !cached {
		gpuModelUpdateCacheMut.Lock()
		gpuModelUpdateCache[key] = cache
		gpuModelUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q gpuModelQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for gpu_models")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for gpu_models")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o GpuModelSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), gpuModelPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"gpu_models\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, gpuModelPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in gpuModel slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all gpuModel")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *GpuModel) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no gpu_models provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(gpuModelColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	gpuModelUpsertCacheMut.RLock()
	cache, cached := gpuModelUpsertCache[key]
	gpuModelUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			gpuModelAllColumns,
			gpuModelColumnsWithDefault,
			gpuModelColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			gpuModelAllColumns,
			gpuModelPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert gpu_models, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(gpuModelPrimaryKeyColumns))
			copy(conflict, gpuModelPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"gpu_models\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(gpuModelType, gpuModelMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(gpuModelType, gpuModelMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert gpu_models")
	}

	if !cached {
		gpuModelUpsertCacheMut.Lock()
		gpuModelUpsertCache[key] = cache
		gpuModelUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single GpuModel record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *GpuModel) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no GpuModel provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), gpuModelPrimaryKeyMapping)
	sql := "DELETE FROM \"gpu_models\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from gpu_models")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for gpu_models")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q gpuModelQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no gpuModelQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from gpu_models")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for gpu_models")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o GpuModelSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(gpuModelBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), gpuModelPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"gpu_models\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, gpuModelPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from gpuModel slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for gpu_models")
	}

	if len(gpuModelAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *GpuModel) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindGpuModel(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *GpuModelSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := GpuModelSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), gpuModelPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"gpu_models\".* FROM \"gpu_models\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, gpuModelPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in GpuModelSlice")
	}

	*o = slice

	return nil
}

// GpuModelExists checks if the GpuModel row exists.
func GpuModelExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"gpu_models\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if gpu_models exists")
	}

	return exists, nil
}
