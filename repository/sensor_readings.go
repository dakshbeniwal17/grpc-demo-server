// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SensorReading is an object representing the database table.
type SensorReading struct {
	ID            string       `boil:"id" json:"id" toml:"id" yaml:"id"`
	SensorModelID null.String  `boil:"sensor_model_id" json:"sensor_model_id,omitempty" toml:"sensor_model_id" yaml:"sensor_model_id,omitempty"`
	HostID        null.String  `boil:"host_id" json:"host_id,omitempty" toml:"host_id" yaml:"host_id,omitempty"`
	Reading       null.Float64 `boil:"reading" json:"reading,omitempty" toml:"reading" yaml:"reading,omitempty"`
	Updated       null.Time    `boil:"updated" json:"updated,omitempty" toml:"updated" yaml:"updated,omitempty"`

	R *sensorReadingR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sensorReadingL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SensorReadingColumns = struct {
	ID            string
	SensorModelID string
	HostID        string
	Reading       string
	Updated       string
}{
	ID:            "id",
	SensorModelID: "sensor_model_id",
	HostID:        "host_id",
	Reading:       "reading",
	Updated:       "updated",
}

var SensorReadingTableColumns = struct {
	ID            string
	SensorModelID string
	HostID        string
	Reading       string
	Updated       string
}{
	ID:            "sensor_readings.id",
	SensorModelID: "sensor_readings.sensor_model_id",
	HostID:        "sensor_readings.host_id",
	Reading:       "sensor_readings.reading",
	Updated:       "sensor_readings.updated",
}

// Generated where

var SensorReadingWhere = struct {
	ID            whereHelperstring
	SensorModelID whereHelpernull_String
	HostID        whereHelpernull_String
	Reading       whereHelpernull_Float64
	Updated       whereHelpernull_Time
}{
	ID:            whereHelperstring{field: "\"sensor_readings\".\"id\""},
	SensorModelID: whereHelpernull_String{field: "\"sensor_readings\".\"sensor_model_id\""},
	HostID:        whereHelpernull_String{field: "\"sensor_readings\".\"host_id\""},
	Reading:       whereHelpernull_Float64{field: "\"sensor_readings\".\"reading\""},
	Updated:       whereHelpernull_Time{field: "\"sensor_readings\".\"updated\""},
}

// SensorReadingRels is where relationship names are stored.
var SensorReadingRels = struct {
	Host        string
	SensorModel string
}{
	Host:        "Host",
	SensorModel: "SensorModel",
}

// sensorReadingR is where relationships are stored.
type sensorReadingR struct {
	Host        *Host `boil:"Host" json:"Host" toml:"Host" yaml:"Host"`
	SensorModel *Host `boil:"SensorModel" json:"SensorModel" toml:"SensorModel" yaml:"SensorModel"`
}

// NewStruct creates a new relationship struct
func (*sensorReadingR) NewStruct() *sensorReadingR {
	return &sensorReadingR{}
}

// sensorReadingL is where Load methods for each relationship are stored.
type sensorReadingL struct{}

var (
	sensorReadingAllColumns            = []string{"id", "sensor_model_id", "host_id", "reading", "updated"}
	sensorReadingColumnsWithoutDefault = []string{}
	sensorReadingColumnsWithDefault    = []string{"id", "sensor_model_id", "host_id", "reading", "updated"}
	sensorReadingPrimaryKeyColumns     = []string{"id"}
	sensorReadingGeneratedColumns      = []string{}
)

type (
	// SensorReadingSlice is an alias for a slice of pointers to SensorReading.
	// This should almost always be used instead of []SensorReading.
	SensorReadingSlice []*SensorReading
	// SensorReadingHook is the signature for custom SensorReading hook methods
	SensorReadingHook func(context.Context, boil.ContextExecutor, *SensorReading) error

	sensorReadingQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sensorReadingType                 = reflect.TypeOf(&SensorReading{})
	sensorReadingMapping              = queries.MakeStructMapping(sensorReadingType)
	sensorReadingPrimaryKeyMapping, _ = queries.BindMapping(sensorReadingType, sensorReadingMapping, sensorReadingPrimaryKeyColumns)
	sensorReadingInsertCacheMut       sync.RWMutex
	sensorReadingInsertCache          = make(map[string]insertCache)
	sensorReadingUpdateCacheMut       sync.RWMutex
	sensorReadingUpdateCache          = make(map[string]updateCache)
	sensorReadingUpsertCacheMut       sync.RWMutex
	sensorReadingUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sensorReadingAfterSelectHooks []SensorReadingHook

var sensorReadingBeforeInsertHooks []SensorReadingHook
var sensorReadingAfterInsertHooks []SensorReadingHook

var sensorReadingBeforeUpdateHooks []SensorReadingHook
var sensorReadingAfterUpdateHooks []SensorReadingHook

var sensorReadingBeforeDeleteHooks []SensorReadingHook
var sensorReadingAfterDeleteHooks []SensorReadingHook

var sensorReadingBeforeUpsertHooks []SensorReadingHook
var sensorReadingAfterUpsertHooks []SensorReadingHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SensorReading) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sensorReadingAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SensorReading) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sensorReadingBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SensorReading) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sensorReadingAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SensorReading) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sensorReadingBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SensorReading) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sensorReadingAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SensorReading) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sensorReadingBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SensorReading) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sensorReadingAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SensorReading) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sensorReadingBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SensorReading) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sensorReadingAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSensorReadingHook registers your hook function for all future operations.
func AddSensorReadingHook(hookPoint boil.HookPoint, sensorReadingHook SensorReadingHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sensorReadingAfterSelectHooks = append(sensorReadingAfterSelectHooks, sensorReadingHook)
	case boil.BeforeInsertHook:
		sensorReadingBeforeInsertHooks = append(sensorReadingBeforeInsertHooks, sensorReadingHook)
	case boil.AfterInsertHook:
		sensorReadingAfterInsertHooks = append(sensorReadingAfterInsertHooks, sensorReadingHook)
	case boil.BeforeUpdateHook:
		sensorReadingBeforeUpdateHooks = append(sensorReadingBeforeUpdateHooks, sensorReadingHook)
	case boil.AfterUpdateHook:
		sensorReadingAfterUpdateHooks = append(sensorReadingAfterUpdateHooks, sensorReadingHook)
	case boil.BeforeDeleteHook:
		sensorReadingBeforeDeleteHooks = append(sensorReadingBeforeDeleteHooks, sensorReadingHook)
	case boil.AfterDeleteHook:
		sensorReadingAfterDeleteHooks = append(sensorReadingAfterDeleteHooks, sensorReadingHook)
	case boil.BeforeUpsertHook:
		sensorReadingBeforeUpsertHooks = append(sensorReadingBeforeUpsertHooks, sensorReadingHook)
	case boil.AfterUpsertHook:
		sensorReadingAfterUpsertHooks = append(sensorReadingAfterUpsertHooks, sensorReadingHook)
	}
}

// One returns a single sensorReading record from the query.
func (q sensorReadingQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SensorReading, error) {
	o := &SensorReading{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sensor_readings")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SensorReading records from the query.
func (q sensorReadingQuery) All(ctx context.Context, exec boil.ContextExecutor) (SensorReadingSlice, error) {
	var o []*SensorReading

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SensorReading slice")
	}

	if len(sensorReadingAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SensorReading records in the query.
func (q sensorReadingQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sensor_readings rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sensorReadingQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sensor_readings exists")
	}

	return count > 0, nil
}

// Host pointed to by the foreign key.
func (o *SensorReading) Host(mods ...qm.QueryMod) hostQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.HostID),
	}

	queryMods = append(queryMods, mods...)

	query := Hosts(queryMods...)
	queries.SetFrom(query.Query, "\"hosts\"")

	return query
}

// SensorModel pointed to by the foreign key.
func (o *SensorReading) SensorModel(mods ...qm.QueryMod) hostQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.SensorModelID),
	}

	queryMods = append(queryMods, mods...)

	query := Hosts(queryMods...)
	queries.SetFrom(query.Query, "\"hosts\"")

	return query
}

// LoadHost allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (sensorReadingL) LoadHost(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSensorReading interface{}, mods queries.Applicator) error {
	var slice []*SensorReading
	var object *SensorReading

	if singular {
		object = maybeSensorReading.(*SensorReading)
	} else {
		slice = *maybeSensorReading.(*[]*SensorReading)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sensorReadingR{}
		}
		if !queries.IsNil(object.HostID) {
			args = append(args, object.HostID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sensorReadingR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.HostID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.HostID) {
				args = append(args, obj.HostID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`hosts`),
		qm.WhereIn(`hosts.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Host")
	}

	var resultSlice []*Host
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Host")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for hosts")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for hosts")
	}

	if len(sensorReadingAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Host = foreign
		if foreign.R == nil {
			foreign.R = &hostR{}
		}
		foreign.R.SensorReadings = append(foreign.R.SensorReadings, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.HostID, foreign.ID) {
				local.R.Host = foreign
				if foreign.R == nil {
					foreign.R = &hostR{}
				}
				foreign.R.SensorReadings = append(foreign.R.SensorReadings, local)
				break
			}
		}
	}

	return nil
}

// LoadSensorModel allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (sensorReadingL) LoadSensorModel(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSensorReading interface{}, mods queries.Applicator) error {
	var slice []*SensorReading
	var object *SensorReading

	if singular {
		object = maybeSensorReading.(*SensorReading)
	} else {
		slice = *maybeSensorReading.(*[]*SensorReading)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sensorReadingR{}
		}
		if !queries.IsNil(object.SensorModelID) {
			args = append(args, object.SensorModelID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sensorReadingR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.SensorModelID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.SensorModelID) {
				args = append(args, obj.SensorModelID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`hosts`),
		qm.WhereIn(`hosts.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Host")
	}

	var resultSlice []*Host
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Host")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for hosts")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for hosts")
	}

	if len(sensorReadingAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.SensorModel = foreign
		if foreign.R == nil {
			foreign.R = &hostR{}
		}
		foreign.R.SensorModelSensorReadings = append(foreign.R.SensorModelSensorReadings, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.SensorModelID, foreign.ID) {
				local.R.SensorModel = foreign
				if foreign.R == nil {
					foreign.R = &hostR{}
				}
				foreign.R.SensorModelSensorReadings = append(foreign.R.SensorModelSensorReadings, local)
				break
			}
		}
	}

	return nil
}

// SetHost of the sensorReading to the related item.
// Sets o.R.Host to related.
// Adds o to related.R.SensorReadings.
func (o *SensorReading) SetHost(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Host) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"sensor_readings\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"host_id"}),
		strmangle.WhereClause("\"", "\"", 2, sensorReadingPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.HostID, related.ID)
	if o.R == nil {
		o.R = &sensorReadingR{
			Host: related,
		}
	} else {
		o.R.Host = related
	}

	if related.R == nil {
		related.R = &hostR{
			SensorReadings: SensorReadingSlice{o},
		}
	} else {
		related.R.SensorReadings = append(related.R.SensorReadings, o)
	}

	return nil
}

// RemoveHost relationship.
// Sets o.R.Host to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *SensorReading) RemoveHost(ctx context.Context, exec boil.ContextExecutor, related *Host) error {
	var err error

	queries.SetScanner(&o.HostID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("host_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Host = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.SensorReadings {
		if queries.Equal(o.HostID, ri.HostID) {
			continue
		}

		ln := len(related.R.SensorReadings)
		if ln > 1 && i < ln-1 {
			related.R.SensorReadings[i] = related.R.SensorReadings[ln-1]
		}
		related.R.SensorReadings = related.R.SensorReadings[:ln-1]
		break
	}
	return nil
}

// SetSensorModel of the sensorReading to the related item.
// Sets o.R.SensorModel to related.
// Adds o to related.R.SensorModelSensorReadings.
func (o *SensorReading) SetSensorModel(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Host) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"sensor_readings\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"sensor_model_id"}),
		strmangle.WhereClause("\"", "\"", 2, sensorReadingPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.SensorModelID, related.ID)
	if o.R == nil {
		o.R = &sensorReadingR{
			SensorModel: related,
		}
	} else {
		o.R.SensorModel = related
	}

	if related.R == nil {
		related.R = &hostR{
			SensorModelSensorReadings: SensorReadingSlice{o},
		}
	} else {
		related.R.SensorModelSensorReadings = append(related.R.SensorModelSensorReadings, o)
	}

	return nil
}

// RemoveSensorModel relationship.
// Sets o.R.SensorModel to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *SensorReading) RemoveSensorModel(ctx context.Context, exec boil.ContextExecutor, related *Host) error {
	var err error

	queries.SetScanner(&o.SensorModelID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("sensor_model_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.SensorModel = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.SensorModelSensorReadings {
		if queries.Equal(o.SensorModelID, ri.SensorModelID) {
			continue
		}

		ln := len(related.R.SensorModelSensorReadings)
		if ln > 1 && i < ln-1 {
			related.R.SensorModelSensorReadings[i] = related.R.SensorModelSensorReadings[ln-1]
		}
		related.R.SensorModelSensorReadings = related.R.SensorModelSensorReadings[:ln-1]
		break
	}
	return nil
}

// SensorReadings retrieves all the records using an executor.
func SensorReadings(mods ...qm.QueryMod) sensorReadingQuery {
	mods = append(mods, qm.From("\"sensor_readings\""))
	return sensorReadingQuery{NewQuery(mods...)}
}

// FindSensorReading retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSensorReading(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*SensorReading, error) {
	sensorReadingObj := &SensorReading{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"sensor_readings\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, sensorReadingObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sensor_readings")
	}

	if err = sensorReadingObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sensorReadingObj, err
	}

	return sensorReadingObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SensorReading) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sensor_readings provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sensorReadingColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sensorReadingInsertCacheMut.RLock()
	cache, cached := sensorReadingInsertCache[key]
	sensorReadingInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sensorReadingAllColumns,
			sensorReadingColumnsWithDefault,
			sensorReadingColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sensorReadingType, sensorReadingMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sensorReadingType, sensorReadingMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"sensor_readings\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"sensor_readings\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sensor_readings")
	}

	if !cached {
		sensorReadingInsertCacheMut.Lock()
		sensorReadingInsertCache[key] = cache
		sensorReadingInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SensorReading.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SensorReading) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sensorReadingUpdateCacheMut.RLock()
	cache, cached := sensorReadingUpdateCache[key]
	sensorReadingUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sensorReadingAllColumns,
			sensorReadingPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sensor_readings, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"sensor_readings\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, sensorReadingPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sensorReadingType, sensorReadingMapping, append(wl, sensorReadingPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sensor_readings row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sensor_readings")
	}

	if !cached {
		sensorReadingUpdateCacheMut.Lock()
		sensorReadingUpdateCache[key] = cache
		sensorReadingUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sensorReadingQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sensor_readings")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sensor_readings")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SensorReadingSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sensorReadingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"sensor_readings\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, sensorReadingPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sensorReading slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sensorReading")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SensorReading) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sensor_readings provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sensorReadingColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sensorReadingUpsertCacheMut.RLock()
	cache, cached := sensorReadingUpsertCache[key]
	sensorReadingUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sensorReadingAllColumns,
			sensorReadingColumnsWithDefault,
			sensorReadingColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sensorReadingAllColumns,
			sensorReadingPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert sensor_readings, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(sensorReadingPrimaryKeyColumns))
			copy(conflict, sensorReadingPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"sensor_readings\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(sensorReadingType, sensorReadingMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sensorReadingType, sensorReadingMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert sensor_readings")
	}

	if !cached {
		sensorReadingUpsertCacheMut.Lock()
		sensorReadingUpsertCache[key] = cache
		sensorReadingUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SensorReading record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SensorReading) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SensorReading provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sensorReadingPrimaryKeyMapping)
	sql := "DELETE FROM \"sensor_readings\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sensor_readings")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sensor_readings")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sensorReadingQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sensorReadingQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sensor_readings")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sensor_readings")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SensorReadingSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sensorReadingBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sensorReadingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"sensor_readings\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, sensorReadingPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sensorReading slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sensor_readings")
	}

	if len(sensorReadingAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SensorReading) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSensorReading(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SensorReadingSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SensorReadingSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sensorReadingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"sensor_readings\".* FROM \"sensor_readings\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, sensorReadingPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SensorReadingSlice")
	}

	*o = slice

	return nil
}

// SensorReadingExists checks if the SensorReading row exists.
func SensorReadingExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"sensor_readings\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sensor_readings exists")
	}

	return exists, nil
}
