// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// PendingRequest is an object representing the database table.
type PendingRequest struct {
	ID         string       `boil:"id" json:"id" toml:"id" yaml:"id"`
	UserID     string       `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	CMD        null.String  `boil:"cmd" json:"cmd,omitempty" toml:"cmd" yaml:"cmd,omitempty"`
	Container  null.String  `boil:"container" json:"container,omitempty" toml:"container" yaml:"container,omitempty"`
	TimeQuota  null.Float64 `boil:"time_quota" json:"time_quota,omitempty" toml:"time_quota" yaml:"time_quota,omitempty"`
	InsertedAt null.Time    `boil:"inserted_at" json:"inserted_at,omitempty" toml:"inserted_at" yaml:"inserted_at,omitempty"`

	R *pendingRequestR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L pendingRequestL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PendingRequestColumns = struct {
	ID         string
	UserID     string
	CMD        string
	Container  string
	TimeQuota  string
	InsertedAt string
}{
	ID:         "id",
	UserID:     "user_id",
	CMD:        "cmd",
	Container:  "container",
	TimeQuota:  "time_quota",
	InsertedAt: "inserted_at",
}

var PendingRequestTableColumns = struct {
	ID         string
	UserID     string
	CMD        string
	Container  string
	TimeQuota  string
	InsertedAt string
}{
	ID:         "pending_requests.id",
	UserID:     "pending_requests.user_id",
	CMD:        "pending_requests.cmd",
	Container:  "pending_requests.container",
	TimeQuota:  "pending_requests.time_quota",
	InsertedAt: "pending_requests.inserted_at",
}

// Generated where

var PendingRequestWhere = struct {
	ID         whereHelperstring
	UserID     whereHelperstring
	CMD        whereHelpernull_String
	Container  whereHelpernull_String
	TimeQuota  whereHelpernull_Float64
	InsertedAt whereHelpernull_Time
}{
	ID:         whereHelperstring{field: "\"pending_requests\".\"id\""},
	UserID:     whereHelperstring{field: "\"pending_requests\".\"user_id\""},
	CMD:        whereHelpernull_String{field: "\"pending_requests\".\"cmd\""},
	Container:  whereHelpernull_String{field: "\"pending_requests\".\"container\""},
	TimeQuota:  whereHelpernull_Float64{field: "\"pending_requests\".\"time_quota\""},
	InsertedAt: whereHelpernull_Time{field: "\"pending_requests\".\"inserted_at\""},
}

// PendingRequestRels is where relationship names are stored.
var PendingRequestRels = struct {
}{}

// pendingRequestR is where relationships are stored.
type pendingRequestR struct {
}

// NewStruct creates a new relationship struct
func (*pendingRequestR) NewStruct() *pendingRequestR {
	return &pendingRequestR{}
}

// pendingRequestL is where Load methods for each relationship are stored.
type pendingRequestL struct{}

var (
	pendingRequestAllColumns            = []string{"id", "user_id", "cmd", "container", "time_quota", "inserted_at"}
	pendingRequestColumnsWithoutDefault = []string{"id", "user_id"}
	pendingRequestColumnsWithDefault    = []string{"cmd", "container", "time_quota", "inserted_at"}
	pendingRequestPrimaryKeyColumns     = []string{"id"}
	pendingRequestGeneratedColumns      = []string{}
)

type (
	// PendingRequestSlice is an alias for a slice of pointers to PendingRequest.
	// This should almost always be used instead of []PendingRequest.
	PendingRequestSlice []*PendingRequest
	// PendingRequestHook is the signature for custom PendingRequest hook methods
	PendingRequestHook func(context.Context, boil.ContextExecutor, *PendingRequest) error

	pendingRequestQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	pendingRequestType                 = reflect.TypeOf(&PendingRequest{})
	pendingRequestMapping              = queries.MakeStructMapping(pendingRequestType)
	pendingRequestPrimaryKeyMapping, _ = queries.BindMapping(pendingRequestType, pendingRequestMapping, pendingRequestPrimaryKeyColumns)
	pendingRequestInsertCacheMut       sync.RWMutex
	pendingRequestInsertCache          = make(map[string]insertCache)
	pendingRequestUpdateCacheMut       sync.RWMutex
	pendingRequestUpdateCache          = make(map[string]updateCache)
	pendingRequestUpsertCacheMut       sync.RWMutex
	pendingRequestUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var pendingRequestAfterSelectHooks []PendingRequestHook

var pendingRequestBeforeInsertHooks []PendingRequestHook
var pendingRequestAfterInsertHooks []PendingRequestHook

var pendingRequestBeforeUpdateHooks []PendingRequestHook
var pendingRequestAfterUpdateHooks []PendingRequestHook

var pendingRequestBeforeDeleteHooks []PendingRequestHook
var pendingRequestAfterDeleteHooks []PendingRequestHook

var pendingRequestBeforeUpsertHooks []PendingRequestHook
var pendingRequestAfterUpsertHooks []PendingRequestHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PendingRequest) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pendingRequestAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PendingRequest) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pendingRequestBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PendingRequest) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pendingRequestAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PendingRequest) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pendingRequestBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PendingRequest) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pendingRequestAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PendingRequest) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pendingRequestBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PendingRequest) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pendingRequestAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PendingRequest) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pendingRequestBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PendingRequest) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pendingRequestAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPendingRequestHook registers your hook function for all future operations.
func AddPendingRequestHook(hookPoint boil.HookPoint, pendingRequestHook PendingRequestHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		pendingRequestAfterSelectHooks = append(pendingRequestAfterSelectHooks, pendingRequestHook)
	case boil.BeforeInsertHook:
		pendingRequestBeforeInsertHooks = append(pendingRequestBeforeInsertHooks, pendingRequestHook)
	case boil.AfterInsertHook:
		pendingRequestAfterInsertHooks = append(pendingRequestAfterInsertHooks, pendingRequestHook)
	case boil.BeforeUpdateHook:
		pendingRequestBeforeUpdateHooks = append(pendingRequestBeforeUpdateHooks, pendingRequestHook)
	case boil.AfterUpdateHook:
		pendingRequestAfterUpdateHooks = append(pendingRequestAfterUpdateHooks, pendingRequestHook)
	case boil.BeforeDeleteHook:
		pendingRequestBeforeDeleteHooks = append(pendingRequestBeforeDeleteHooks, pendingRequestHook)
	case boil.AfterDeleteHook:
		pendingRequestAfterDeleteHooks = append(pendingRequestAfterDeleteHooks, pendingRequestHook)
	case boil.BeforeUpsertHook:
		pendingRequestBeforeUpsertHooks = append(pendingRequestBeforeUpsertHooks, pendingRequestHook)
	case boil.AfterUpsertHook:
		pendingRequestAfterUpsertHooks = append(pendingRequestAfterUpsertHooks, pendingRequestHook)
	}
}

// One returns a single pendingRequest record from the query.
func (q pendingRequestQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PendingRequest, error) {
	o := &PendingRequest{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for pending_requests")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PendingRequest records from the query.
func (q pendingRequestQuery) All(ctx context.Context, exec boil.ContextExecutor) (PendingRequestSlice, error) {
	var o []*PendingRequest

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to PendingRequest slice")
	}

	if len(pendingRequestAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PendingRequest records in the query.
func (q pendingRequestQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count pending_requests rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q pendingRequestQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if pending_requests exists")
	}

	return count > 0, nil
}

// PendingRequests retrieves all the records using an executor.
func PendingRequests(mods ...qm.QueryMod) pendingRequestQuery {
	mods = append(mods, qm.From("\"pending_requests\""))
	return pendingRequestQuery{NewQuery(mods...)}
}

// FindPendingRequest retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPendingRequest(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*PendingRequest, error) {
	pendingRequestObj := &PendingRequest{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"pending_requests\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, pendingRequestObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from pending_requests")
	}

	if err = pendingRequestObj.doAfterSelectHooks(ctx, exec); err != nil {
		return pendingRequestObj, err
	}

	return pendingRequestObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PendingRequest) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no pending_requests provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(pendingRequestColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	pendingRequestInsertCacheMut.RLock()
	cache, cached := pendingRequestInsertCache[key]
	pendingRequestInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			pendingRequestAllColumns,
			pendingRequestColumnsWithDefault,
			pendingRequestColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(pendingRequestType, pendingRequestMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(pendingRequestType, pendingRequestMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"pending_requests\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"pending_requests\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into pending_requests")
	}

	if !cached {
		pendingRequestInsertCacheMut.Lock()
		pendingRequestInsertCache[key] = cache
		pendingRequestInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the PendingRequest.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PendingRequest) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	pendingRequestUpdateCacheMut.RLock()
	cache, cached := pendingRequestUpdateCache[key]
	pendingRequestUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			pendingRequestAllColumns,
			pendingRequestPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update pending_requests, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"pending_requests\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, pendingRequestPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(pendingRequestType, pendingRequestMapping, append(wl, pendingRequestPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update pending_requests row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for pending_requests")
	}

	if !cached {
		pendingRequestUpdateCacheMut.Lock()
		pendingRequestUpdateCache[key] = cache
		pendingRequestUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q pendingRequestQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for pending_requests")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for pending_requests")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PendingRequestSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pendingRequestPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"pending_requests\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, pendingRequestPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in pendingRequest slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all pendingRequest")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PendingRequest) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no pending_requests provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(pendingRequestColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	pendingRequestUpsertCacheMut.RLock()
	cache, cached := pendingRequestUpsertCache[key]
	pendingRequestUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			pendingRequestAllColumns,
			pendingRequestColumnsWithDefault,
			pendingRequestColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			pendingRequestAllColumns,
			pendingRequestPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert pending_requests, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(pendingRequestPrimaryKeyColumns))
			copy(conflict, pendingRequestPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"pending_requests\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(pendingRequestType, pendingRequestMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(pendingRequestType, pendingRequestMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert pending_requests")
	}

	if !cached {
		pendingRequestUpsertCacheMut.Lock()
		pendingRequestUpsertCache[key] = cache
		pendingRequestUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single PendingRequest record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PendingRequest) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no PendingRequest provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), pendingRequestPrimaryKeyMapping)
	sql := "DELETE FROM \"pending_requests\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from pending_requests")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for pending_requests")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q pendingRequestQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no pendingRequestQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from pending_requests")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for pending_requests")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PendingRequestSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(pendingRequestBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pendingRequestPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"pending_requests\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, pendingRequestPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from pendingRequest slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for pending_requests")
	}

	if len(pendingRequestAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PendingRequest) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPendingRequest(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PendingRequestSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PendingRequestSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pendingRequestPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"pending_requests\".* FROM \"pending_requests\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, pendingRequestPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PendingRequestSlice")
	}

	*o = slice

	return nil
}

// PendingRequestExists checks if the PendingRequest row exists.
func PendingRequestExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"pending_requests\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if pending_requests exists")
	}

	return exists, nil
}
