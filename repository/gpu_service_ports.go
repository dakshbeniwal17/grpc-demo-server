// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// GpuServicePort is an object representing the database table.
type GpuServicePort struct {
	ServiceID     string   `boil:"service_id" json:"service_id" toml:"service_id" yaml:"service_id"`
	HostPort      null.Int `boil:"host_port" json:"host_port,omitempty" toml:"host_port" yaml:"host_port,omitempty"`
	ContainerPort null.Int `boil:"container_port" json:"container_port,omitempty" toml:"container_port" yaml:"container_port,omitempty"`

	R *gpuServicePortR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L gpuServicePortL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var GpuServicePortColumns = struct {
	ServiceID     string
	HostPort      string
	ContainerPort string
}{
	ServiceID:     "service_id",
	HostPort:      "host_port",
	ContainerPort: "container_port",
}

var GpuServicePortTableColumns = struct {
	ServiceID     string
	HostPort      string
	ContainerPort string
}{
	ServiceID:     "gpu_service_ports.service_id",
	HostPort:      "gpu_service_ports.host_port",
	ContainerPort: "gpu_service_ports.container_port",
}

// Generated where

var GpuServicePortWhere = struct {
	ServiceID     whereHelperstring
	HostPort      whereHelpernull_Int
	ContainerPort whereHelpernull_Int
}{
	ServiceID:     whereHelperstring{field: "\"gpu_service_ports\".\"service_id\""},
	HostPort:      whereHelpernull_Int{field: "\"gpu_service_ports\".\"host_port\""},
	ContainerPort: whereHelpernull_Int{field: "\"gpu_service_ports\".\"container_port\""},
}

// GpuServicePortRels is where relationship names are stored.
var GpuServicePortRels = struct {
	Service string
}{
	Service: "Service",
}

// gpuServicePortR is where relationships are stored.
type gpuServicePortR struct {
	Service *GpuService `boil:"Service" json:"Service" toml:"Service" yaml:"Service"`
}

// NewStruct creates a new relationship struct
func (*gpuServicePortR) NewStruct() *gpuServicePortR {
	return &gpuServicePortR{}
}

// gpuServicePortL is where Load methods for each relationship are stored.
type gpuServicePortL struct{}

var (
	gpuServicePortAllColumns            = []string{"service_id", "host_port", "container_port"}
	gpuServicePortColumnsWithoutDefault = []string{}
	gpuServicePortColumnsWithDefault    = []string{"service_id", "host_port", "container_port"}
	gpuServicePortPrimaryKeyColumns     = []string{"service_id"}
	gpuServicePortGeneratedColumns      = []string{}
)

type (
	// GpuServicePortSlice is an alias for a slice of pointers to GpuServicePort.
	// This should almost always be used instead of []GpuServicePort.
	GpuServicePortSlice []*GpuServicePort
	// GpuServicePortHook is the signature for custom GpuServicePort hook methods
	GpuServicePortHook func(context.Context, boil.ContextExecutor, *GpuServicePort) error

	gpuServicePortQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	gpuServicePortType                 = reflect.TypeOf(&GpuServicePort{})
	gpuServicePortMapping              = queries.MakeStructMapping(gpuServicePortType)
	gpuServicePortPrimaryKeyMapping, _ = queries.BindMapping(gpuServicePortType, gpuServicePortMapping, gpuServicePortPrimaryKeyColumns)
	gpuServicePortInsertCacheMut       sync.RWMutex
	gpuServicePortInsertCache          = make(map[string]insertCache)
	gpuServicePortUpdateCacheMut       sync.RWMutex
	gpuServicePortUpdateCache          = make(map[string]updateCache)
	gpuServicePortUpsertCacheMut       sync.RWMutex
	gpuServicePortUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var gpuServicePortAfterSelectHooks []GpuServicePortHook

var gpuServicePortBeforeInsertHooks []GpuServicePortHook
var gpuServicePortAfterInsertHooks []GpuServicePortHook

var gpuServicePortBeforeUpdateHooks []GpuServicePortHook
var gpuServicePortAfterUpdateHooks []GpuServicePortHook

var gpuServicePortBeforeDeleteHooks []GpuServicePortHook
var gpuServicePortAfterDeleteHooks []GpuServicePortHook

var gpuServicePortBeforeUpsertHooks []GpuServicePortHook
var gpuServicePortAfterUpsertHooks []GpuServicePortHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *GpuServicePort) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gpuServicePortAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *GpuServicePort) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gpuServicePortBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *GpuServicePort) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gpuServicePortAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *GpuServicePort) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gpuServicePortBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *GpuServicePort) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gpuServicePortAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *GpuServicePort) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gpuServicePortBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *GpuServicePort) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gpuServicePortAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *GpuServicePort) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gpuServicePortBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *GpuServicePort) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gpuServicePortAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddGpuServicePortHook registers your hook function for all future operations.
func AddGpuServicePortHook(hookPoint boil.HookPoint, gpuServicePortHook GpuServicePortHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		gpuServicePortAfterSelectHooks = append(gpuServicePortAfterSelectHooks, gpuServicePortHook)
	case boil.BeforeInsertHook:
		gpuServicePortBeforeInsertHooks = append(gpuServicePortBeforeInsertHooks, gpuServicePortHook)
	case boil.AfterInsertHook:
		gpuServicePortAfterInsertHooks = append(gpuServicePortAfterInsertHooks, gpuServicePortHook)
	case boil.BeforeUpdateHook:
		gpuServicePortBeforeUpdateHooks = append(gpuServicePortBeforeUpdateHooks, gpuServicePortHook)
	case boil.AfterUpdateHook:
		gpuServicePortAfterUpdateHooks = append(gpuServicePortAfterUpdateHooks, gpuServicePortHook)
	case boil.BeforeDeleteHook:
		gpuServicePortBeforeDeleteHooks = append(gpuServicePortBeforeDeleteHooks, gpuServicePortHook)
	case boil.AfterDeleteHook:
		gpuServicePortAfterDeleteHooks = append(gpuServicePortAfterDeleteHooks, gpuServicePortHook)
	case boil.BeforeUpsertHook:
		gpuServicePortBeforeUpsertHooks = append(gpuServicePortBeforeUpsertHooks, gpuServicePortHook)
	case boil.AfterUpsertHook:
		gpuServicePortAfterUpsertHooks = append(gpuServicePortAfterUpsertHooks, gpuServicePortHook)
	}
}

// One returns a single gpuServicePort record from the query.
func (q gpuServicePortQuery) One(ctx context.Context, exec boil.ContextExecutor) (*GpuServicePort, error) {
	o := &GpuServicePort{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for gpu_service_ports")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all GpuServicePort records from the query.
func (q gpuServicePortQuery) All(ctx context.Context, exec boil.ContextExecutor) (GpuServicePortSlice, error) {
	var o []*GpuServicePort

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to GpuServicePort slice")
	}

	if len(gpuServicePortAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all GpuServicePort records in the query.
func (q gpuServicePortQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count gpu_service_ports rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q gpuServicePortQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if gpu_service_ports exists")
	}

	return count > 0, nil
}

// Service pointed to by the foreign key.
func (o *GpuServicePort) Service(mods ...qm.QueryMod) gpuServiceQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ServiceID),
	}

	queryMods = append(queryMods, mods...)

	query := GpuServices(queryMods...)
	queries.SetFrom(query.Query, "\"gpu_services\"")

	return query
}

// LoadService allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (gpuServicePortL) LoadService(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGpuServicePort interface{}, mods queries.Applicator) error {
	var slice []*GpuServicePort
	var object *GpuServicePort

	if singular {
		object = maybeGpuServicePort.(*GpuServicePort)
	} else {
		slice = *maybeGpuServicePort.(*[]*GpuServicePort)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &gpuServicePortR{}
		}
		args = append(args, object.ServiceID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &gpuServicePortR{}
			}

			for _, a := range args {
				if a == obj.ServiceID {
					continue Outer
				}
			}

			args = append(args, obj.ServiceID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`gpu_services`),
		qm.WhereIn(`gpu_services.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load GpuService")
	}

	var resultSlice []*GpuService
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice GpuService")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for gpu_services")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for gpu_services")
	}

	if len(gpuServicePortAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Service = foreign
		if foreign.R == nil {
			foreign.R = &gpuServiceR{}
		}
		foreign.R.ServiceGpuServicePort = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ServiceID == foreign.ID {
				local.R.Service = foreign
				if foreign.R == nil {
					foreign.R = &gpuServiceR{}
				}
				foreign.R.ServiceGpuServicePort = local
				break
			}
		}
	}

	return nil
}

// SetService of the gpuServicePort to the related item.
// Sets o.R.Service to related.
// Adds o to related.R.ServiceGpuServicePort.
func (o *GpuServicePort) SetService(ctx context.Context, exec boil.ContextExecutor, insert bool, related *GpuService) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"gpu_service_ports\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"service_id"}),
		strmangle.WhereClause("\"", "\"", 2, gpuServicePortPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ServiceID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ServiceID = related.ID
	if o.R == nil {
		o.R = &gpuServicePortR{
			Service: related,
		}
	} else {
		o.R.Service = related
	}

	if related.R == nil {
		related.R = &gpuServiceR{
			ServiceGpuServicePort: o,
		}
	} else {
		related.R.ServiceGpuServicePort = o
	}

	return nil
}

// GpuServicePorts retrieves all the records using an executor.
func GpuServicePorts(mods ...qm.QueryMod) gpuServicePortQuery {
	mods = append(mods, qm.From("\"gpu_service_ports\""))
	return gpuServicePortQuery{NewQuery(mods...)}
}

// FindGpuServicePort retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindGpuServicePort(ctx context.Context, exec boil.ContextExecutor, serviceID string, selectCols ...string) (*GpuServicePort, error) {
	gpuServicePortObj := &GpuServicePort{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"gpu_service_ports\" where \"service_id\"=$1", sel,
	)

	q := queries.Raw(query, serviceID)

	err := q.Bind(ctx, exec, gpuServicePortObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from gpu_service_ports")
	}

	if err = gpuServicePortObj.doAfterSelectHooks(ctx, exec); err != nil {
		return gpuServicePortObj, err
	}

	return gpuServicePortObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *GpuServicePort) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no gpu_service_ports provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(gpuServicePortColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	gpuServicePortInsertCacheMut.RLock()
	cache, cached := gpuServicePortInsertCache[key]
	gpuServicePortInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			gpuServicePortAllColumns,
			gpuServicePortColumnsWithDefault,
			gpuServicePortColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(gpuServicePortType, gpuServicePortMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(gpuServicePortType, gpuServicePortMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"gpu_service_ports\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"gpu_service_ports\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into gpu_service_ports")
	}

	if !cached {
		gpuServicePortInsertCacheMut.Lock()
		gpuServicePortInsertCache[key] = cache
		gpuServicePortInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the GpuServicePort.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *GpuServicePort) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	gpuServicePortUpdateCacheMut.RLock()
	cache, cached := gpuServicePortUpdateCache[key]
	gpuServicePortUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			gpuServicePortAllColumns,
			gpuServicePortPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update gpu_service_ports, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"gpu_service_ports\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, gpuServicePortPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(gpuServicePortType, gpuServicePortMapping, append(wl, gpuServicePortPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update gpu_service_ports row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for gpu_service_ports")
	}

	if !cached {
		gpuServicePortUpdateCacheMut.Lock()
		gpuServicePortUpdateCache[key] = cache
		gpuServicePortUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q gpuServicePortQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for gpu_service_ports")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for gpu_service_ports")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o GpuServicePortSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), gpuServicePortPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"gpu_service_ports\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, gpuServicePortPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in gpuServicePort slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all gpuServicePort")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *GpuServicePort) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no gpu_service_ports provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(gpuServicePortColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	gpuServicePortUpsertCacheMut.RLock()
	cache, cached := gpuServicePortUpsertCache[key]
	gpuServicePortUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			gpuServicePortAllColumns,
			gpuServicePortColumnsWithDefault,
			gpuServicePortColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			gpuServicePortAllColumns,
			gpuServicePortPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert gpu_service_ports, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(gpuServicePortPrimaryKeyColumns))
			copy(conflict, gpuServicePortPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"gpu_service_ports\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(gpuServicePortType, gpuServicePortMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(gpuServicePortType, gpuServicePortMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert gpu_service_ports")
	}

	if !cached {
		gpuServicePortUpsertCacheMut.Lock()
		gpuServicePortUpsertCache[key] = cache
		gpuServicePortUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single GpuServicePort record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *GpuServicePort) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no GpuServicePort provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), gpuServicePortPrimaryKeyMapping)
	sql := "DELETE FROM \"gpu_service_ports\" WHERE \"service_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from gpu_service_ports")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for gpu_service_ports")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q gpuServicePortQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no gpuServicePortQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from gpu_service_ports")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for gpu_service_ports")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o GpuServicePortSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(gpuServicePortBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), gpuServicePortPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"gpu_service_ports\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, gpuServicePortPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from gpuServicePort slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for gpu_service_ports")
	}

	if len(gpuServicePortAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *GpuServicePort) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindGpuServicePort(ctx, exec, o.ServiceID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *GpuServicePortSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := GpuServicePortSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), gpuServicePortPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"gpu_service_ports\".* FROM \"gpu_service_ports\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, gpuServicePortPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in GpuServicePortSlice")
	}

	*o = slice

	return nil
}

// GpuServicePortExists checks if the GpuServicePort row exists.
func GpuServicePortExists(ctx context.Context, exec boil.ContextExecutor, serviceID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"gpu_service_ports\" where \"service_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, serviceID)
	}
	row := exec.QueryRowContext(ctx, sql, serviceID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if gpu_service_ports exists")
	}

	return exists, nil
}
