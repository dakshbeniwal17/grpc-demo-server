// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Host is an object representing the database table.
type Host struct {
	ID      string       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name    string       `boil:"name" json:"name" toml:"name" yaml:"name"`
	Ready   null.Int     `boil:"ready" json:"ready,omitempty" toml:"ready" yaml:"ready,omitempty"`
	Updated null.Time    `boil:"updated" json:"updated,omitempty" toml:"updated" yaml:"updated,omitempty"`
	JobURL  null.String  `boil:"job_url" json:"job_url,omitempty" toml:"job_url" yaml:"job_url,omitempty"`
	Token   string       `boil:"token" json:"token" toml:"token" yaml:"token"`
	Gpu     null.String  `boil:"gpu" json:"gpu,omitempty" toml:"gpu" yaml:"gpu,omitempty"`
	RAM     null.Float64 `boil:"ram" json:"ram,omitempty" toml:"ram" yaml:"ram,omitempty"`
	Cores   null.Int     `boil:"cores" json:"cores,omitempty" toml:"cores" yaml:"cores,omitempty"`
	Threads null.Int     `boil:"threads" json:"threads,omitempty" toml:"threads" yaml:"threads,omitempty"`

	R *hostR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L hostL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var HostColumns = struct {
	ID      string
	Name    string
	Ready   string
	Updated string
	JobURL  string
	Token   string
	Gpu     string
	RAM     string
	Cores   string
	Threads string
}{
	ID:      "id",
	Name:    "name",
	Ready:   "ready",
	Updated: "updated",
	JobURL:  "job_url",
	Token:   "token",
	Gpu:     "gpu",
	RAM:     "ram",
	Cores:   "cores",
	Threads: "threads",
}

var HostTableColumns = struct {
	ID      string
	Name    string
	Ready   string
	Updated string
	JobURL  string
	Token   string
	Gpu     string
	RAM     string
	Cores   string
	Threads string
}{
	ID:      "hosts.id",
	Name:    "hosts.name",
	Ready:   "hosts.ready",
	Updated: "hosts.updated",
	JobURL:  "hosts.job_url",
	Token:   "hosts.token",
	Gpu:     "hosts.gpu",
	RAM:     "hosts.ram",
	Cores:   "hosts.cores",
	Threads: "hosts.threads",
}

// Generated where

var HostWhere = struct {
	ID      whereHelperstring
	Name    whereHelperstring
	Ready   whereHelpernull_Int
	Updated whereHelpernull_Time
	JobURL  whereHelpernull_String
	Token   whereHelperstring
	Gpu     whereHelpernull_String
	RAM     whereHelpernull_Float64
	Cores   whereHelpernull_Int
	Threads whereHelpernull_Int
}{
	ID:      whereHelperstring{field: "\"hosts\".\"id\""},
	Name:    whereHelperstring{field: "\"hosts\".\"name\""},
	Ready:   whereHelpernull_Int{field: "\"hosts\".\"ready\""},
	Updated: whereHelpernull_Time{field: "\"hosts\".\"updated\""},
	JobURL:  whereHelpernull_String{field: "\"hosts\".\"job_url\""},
	Token:   whereHelperstring{field: "\"hosts\".\"token\""},
	Gpu:     whereHelpernull_String{field: "\"hosts\".\"gpu\""},
	RAM:     whereHelpernull_Float64{field: "\"hosts\".\"ram\""},
	Cores:   whereHelpernull_Int{field: "\"hosts\".\"cores\""},
	Threads: whereHelpernull_Int{field: "\"hosts\".\"threads\""},
}

// HostRels is where relationship names are stored.
var HostRels = struct {
	HostService               string
	Disks                     string
	HostGpus                  string
	SensorReadings            string
	SensorModelSensorReadings string
}{
	HostService:               "HostService",
	Disks:                     "Disks",
	HostGpus:                  "HostGpus",
	SensorReadings:            "SensorReadings",
	SensorModelSensorReadings: "SensorModelSensorReadings",
}

// hostR is where relationships are stored.
type hostR struct {
	HostService               *HostService       `boil:"HostService" json:"HostService" toml:"HostService" yaml:"HostService"`
	Disks                     DiskSlice          `boil:"Disks" json:"Disks" toml:"Disks" yaml:"Disks"`
	HostGpus                  HostGpuSlice       `boil:"HostGpus" json:"HostGpus" toml:"HostGpus" yaml:"HostGpus"`
	SensorReadings            SensorReadingSlice `boil:"SensorReadings" json:"SensorReadings" toml:"SensorReadings" yaml:"SensorReadings"`
	SensorModelSensorReadings SensorReadingSlice `boil:"SensorModelSensorReadings" json:"SensorModelSensorReadings" toml:"SensorModelSensorReadings" yaml:"SensorModelSensorReadings"`
}

// NewStruct creates a new relationship struct
func (*hostR) NewStruct() *hostR {
	return &hostR{}
}

// hostL is where Load methods for each relationship are stored.
type hostL struct{}

var (
	hostAllColumns            = []string{"id", "name", "ready", "updated", "job_url", "token", "gpu", "ram", "cores", "threads"}
	hostColumnsWithoutDefault = []string{"name"}
	hostColumnsWithDefault    = []string{"id", "ready", "updated", "job_url", "token", "gpu", "ram", "cores", "threads"}
	hostPrimaryKeyColumns     = []string{"id"}
	hostGeneratedColumns      = []string{}
)

type (
	// HostSlice is an alias for a slice of pointers to Host.
	// This should almost always be used instead of []Host.
	HostSlice []*Host
	// HostHook is the signature for custom Host hook methods
	HostHook func(context.Context, boil.ContextExecutor, *Host) error

	hostQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	hostType                 = reflect.TypeOf(&Host{})
	hostMapping              = queries.MakeStructMapping(hostType)
	hostPrimaryKeyMapping, _ = queries.BindMapping(hostType, hostMapping, hostPrimaryKeyColumns)
	hostInsertCacheMut       sync.RWMutex
	hostInsertCache          = make(map[string]insertCache)
	hostUpdateCacheMut       sync.RWMutex
	hostUpdateCache          = make(map[string]updateCache)
	hostUpsertCacheMut       sync.RWMutex
	hostUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var hostAfterSelectHooks []HostHook

var hostBeforeInsertHooks []HostHook
var hostAfterInsertHooks []HostHook

var hostBeforeUpdateHooks []HostHook
var hostAfterUpdateHooks []HostHook

var hostBeforeDeleteHooks []HostHook
var hostAfterDeleteHooks []HostHook

var hostBeforeUpsertHooks []HostHook
var hostAfterUpsertHooks []HostHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Host) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hostAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Host) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hostBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Host) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hostAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Host) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hostBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Host) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hostAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Host) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hostBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Host) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hostAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Host) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hostBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Host) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hostAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddHostHook registers your hook function for all future operations.
func AddHostHook(hookPoint boil.HookPoint, hostHook HostHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		hostAfterSelectHooks = append(hostAfterSelectHooks, hostHook)
	case boil.BeforeInsertHook:
		hostBeforeInsertHooks = append(hostBeforeInsertHooks, hostHook)
	case boil.AfterInsertHook:
		hostAfterInsertHooks = append(hostAfterInsertHooks, hostHook)
	case boil.BeforeUpdateHook:
		hostBeforeUpdateHooks = append(hostBeforeUpdateHooks, hostHook)
	case boil.AfterUpdateHook:
		hostAfterUpdateHooks = append(hostAfterUpdateHooks, hostHook)
	case boil.BeforeDeleteHook:
		hostBeforeDeleteHooks = append(hostBeforeDeleteHooks, hostHook)
	case boil.AfterDeleteHook:
		hostAfterDeleteHooks = append(hostAfterDeleteHooks, hostHook)
	case boil.BeforeUpsertHook:
		hostBeforeUpsertHooks = append(hostBeforeUpsertHooks, hostHook)
	case boil.AfterUpsertHook:
		hostAfterUpsertHooks = append(hostAfterUpsertHooks, hostHook)
	}
}

// One returns a single host record from the query.
func (q hostQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Host, error) {
	o := &Host{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for hosts")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Host records from the query.
func (q hostQuery) All(ctx context.Context, exec boil.ContextExecutor) (HostSlice, error) {
	var o []*Host

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Host slice")
	}

	if len(hostAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Host records in the query.
func (q hostQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count hosts rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q hostQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if hosts exists")
	}

	return count > 0, nil
}

// HostService pointed to by the foreign key.
func (o *Host) HostService(mods ...qm.QueryMod) hostServiceQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"host_id\" = ?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	query := HostServices(queryMods...)
	queries.SetFrom(query.Query, "\"host_services\"")

	return query
}

// Disks retrieves all the disk's Disks with an executor.
func (o *Host) Disks(mods ...qm.QueryMod) diskQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"disks\".\"host_id\"=?", o.ID),
	)

	query := Disks(queryMods...)
	queries.SetFrom(query.Query, "\"disks\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"disks\".*"})
	}

	return query
}

// HostGpus retrieves all the host_gpus's HostGpus with an executor.
func (o *Host) HostGpus(mods ...qm.QueryMod) hostGpuQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"host_gpus\".\"host_id\"=?", o.ID),
	)

	query := HostGpus(queryMods...)
	queries.SetFrom(query.Query, "\"host_gpus\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"host_gpus\".*"})
	}

	return query
}

// SensorReadings retrieves all the sensor_reading's SensorReadings with an executor.
func (o *Host) SensorReadings(mods ...qm.QueryMod) sensorReadingQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"sensor_readings\".\"host_id\"=?", o.ID),
	)

	query := SensorReadings(queryMods...)
	queries.SetFrom(query.Query, "\"sensor_readings\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"sensor_readings\".*"})
	}

	return query
}

// SensorModelSensorReadings retrieves all the sensor_reading's SensorReadings with an executor via sensor_model_id column.
func (o *Host) SensorModelSensorReadings(mods ...qm.QueryMod) sensorReadingQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"sensor_readings\".\"sensor_model_id\"=?", o.ID),
	)

	query := SensorReadings(queryMods...)
	queries.SetFrom(query.Query, "\"sensor_readings\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"sensor_readings\".*"})
	}

	return query
}

// LoadHostService allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (hostL) LoadHostService(ctx context.Context, e boil.ContextExecutor, singular bool, maybeHost interface{}, mods queries.Applicator) error {
	var slice []*Host
	var object *Host

	if singular {
		object = maybeHost.(*Host)
	} else {
		slice = *maybeHost.(*[]*Host)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &hostR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &hostR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`host_services`),
		qm.WhereIn(`host_services.host_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load HostService")
	}

	var resultSlice []*HostService
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice HostService")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for host_services")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for host_services")
	}

	if len(hostAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.HostService = foreign
		if foreign.R == nil {
			foreign.R = &hostServiceR{}
		}
		foreign.R.Host = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ID == foreign.HostID {
				local.R.HostService = foreign
				if foreign.R == nil {
					foreign.R = &hostServiceR{}
				}
				foreign.R.Host = local
				break
			}
		}
	}

	return nil
}

// LoadDisks allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (hostL) LoadDisks(ctx context.Context, e boil.ContextExecutor, singular bool, maybeHost interface{}, mods queries.Applicator) error {
	var slice []*Host
	var object *Host

	if singular {
		object = maybeHost.(*Host)
	} else {
		slice = *maybeHost.(*[]*Host)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &hostR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &hostR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`disks`),
		qm.WhereIn(`disks.host_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load disks")
	}

	var resultSlice []*Disk
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice disks")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on disks")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for disks")
	}

	if len(diskAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Disks = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &diskR{}
			}
			foreign.R.Host = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.HostID) {
				local.R.Disks = append(local.R.Disks, foreign)
				if foreign.R == nil {
					foreign.R = &diskR{}
				}
				foreign.R.Host = local
				break
			}
		}
	}

	return nil
}

// LoadHostGpus allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (hostL) LoadHostGpus(ctx context.Context, e boil.ContextExecutor, singular bool, maybeHost interface{}, mods queries.Applicator) error {
	var slice []*Host
	var object *Host

	if singular {
		object = maybeHost.(*Host)
	} else {
		slice = *maybeHost.(*[]*Host)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &hostR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &hostR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`host_gpus`),
		qm.WhereIn(`host_gpus.host_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load host_gpus")
	}

	var resultSlice []*HostGpu
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice host_gpus")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on host_gpus")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for host_gpus")
	}

	if len(hostGpuAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.HostGpus = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &hostGpuR{}
			}
			foreign.R.Host = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.HostID) {
				local.R.HostGpus = append(local.R.HostGpus, foreign)
				if foreign.R == nil {
					foreign.R = &hostGpuR{}
				}
				foreign.R.Host = local
				break
			}
		}
	}

	return nil
}

// LoadSensorReadings allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (hostL) LoadSensorReadings(ctx context.Context, e boil.ContextExecutor, singular bool, maybeHost interface{}, mods queries.Applicator) error {
	var slice []*Host
	var object *Host

	if singular {
		object = maybeHost.(*Host)
	} else {
		slice = *maybeHost.(*[]*Host)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &hostR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &hostR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sensor_readings`),
		qm.WhereIn(`sensor_readings.host_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sensor_readings")
	}

	var resultSlice []*SensorReading
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sensor_readings")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on sensor_readings")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sensor_readings")
	}

	if len(sensorReadingAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SensorReadings = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &sensorReadingR{}
			}
			foreign.R.Host = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.HostID) {
				local.R.SensorReadings = append(local.R.SensorReadings, foreign)
				if foreign.R == nil {
					foreign.R = &sensorReadingR{}
				}
				foreign.R.Host = local
				break
			}
		}
	}

	return nil
}

// LoadSensorModelSensorReadings allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (hostL) LoadSensorModelSensorReadings(ctx context.Context, e boil.ContextExecutor, singular bool, maybeHost interface{}, mods queries.Applicator) error {
	var slice []*Host
	var object *Host

	if singular {
		object = maybeHost.(*Host)
	} else {
		slice = *maybeHost.(*[]*Host)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &hostR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &hostR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sensor_readings`),
		qm.WhereIn(`sensor_readings.sensor_model_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sensor_readings")
	}

	var resultSlice []*SensorReading
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sensor_readings")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on sensor_readings")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sensor_readings")
	}

	if len(sensorReadingAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SensorModelSensorReadings = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &sensorReadingR{}
			}
			foreign.R.SensorModel = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.SensorModelID) {
				local.R.SensorModelSensorReadings = append(local.R.SensorModelSensorReadings, foreign)
				if foreign.R == nil {
					foreign.R = &sensorReadingR{}
				}
				foreign.R.SensorModel = local
				break
			}
		}
	}

	return nil
}

// SetHostService of the host to the related item.
// Sets o.R.HostService to related.
// Adds o to related.R.Host.
func (o *Host) SetHostService(ctx context.Context, exec boil.ContextExecutor, insert bool, related *HostService) error {
	var err error

	if insert {
		related.HostID = o.ID

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"host_services\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"host_id"}),
			strmangle.WhereClause("\"", "\"", 2, hostServicePrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.HostID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, updateQuery)
			fmt.Fprintln(writer, values)
		}
		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.HostID = o.ID

	}

	if o.R == nil {
		o.R = &hostR{
			HostService: related,
		}
	} else {
		o.R.HostService = related
	}

	if related.R == nil {
		related.R = &hostServiceR{
			Host: o,
		}
	} else {
		related.R.Host = o
	}
	return nil
}

// AddDisks adds the given related objects to the existing relationships
// of the host, optionally inserting them as new records.
// Appends related to o.R.Disks.
// Sets related.R.Host appropriately.
func (o *Host) AddDisks(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Disk) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.HostID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"disks\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"host_id"}),
				strmangle.WhereClause("\"", "\"", 2, diskPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.HostID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &hostR{
			Disks: related,
		}
	} else {
		o.R.Disks = append(o.R.Disks, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &diskR{
				Host: o,
			}
		} else {
			rel.R.Host = o
		}
	}
	return nil
}

// SetDisks removes all previously related items of the
// host replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Host's Disks accordingly.
// Replaces o.R.Disks with related.
// Sets related.R.Host's Disks accordingly.
func (o *Host) SetDisks(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Disk) error {
	query := "update \"disks\" set \"host_id\" = null where \"host_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Disks {
			queries.SetScanner(&rel.HostID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Host = nil
		}

		o.R.Disks = nil
	}
	return o.AddDisks(ctx, exec, insert, related...)
}

// RemoveDisks relationships from objects passed in.
// Removes related items from R.Disks (uses pointer comparison, removal does not keep order)
// Sets related.R.Host.
func (o *Host) RemoveDisks(ctx context.Context, exec boil.ContextExecutor, related ...*Disk) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.HostID, nil)
		if rel.R != nil {
			rel.R.Host = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("host_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Disks {
			if rel != ri {
				continue
			}

			ln := len(o.R.Disks)
			if ln > 1 && i < ln-1 {
				o.R.Disks[i] = o.R.Disks[ln-1]
			}
			o.R.Disks = o.R.Disks[:ln-1]
			break
		}
	}

	return nil
}

// AddHostGpus adds the given related objects to the existing relationships
// of the host, optionally inserting them as new records.
// Appends related to o.R.HostGpus.
// Sets related.R.Host appropriately.
func (o *Host) AddHostGpus(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*HostGpu) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.HostID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"host_gpus\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"host_id"}),
				strmangle.WhereClause("\"", "\"", 2, hostGpuPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.HostID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &hostR{
			HostGpus: related,
		}
	} else {
		o.R.HostGpus = append(o.R.HostGpus, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &hostGpuR{
				Host: o,
			}
		} else {
			rel.R.Host = o
		}
	}
	return nil
}

// SetHostGpus removes all previously related items of the
// host replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Host's HostGpus accordingly.
// Replaces o.R.HostGpus with related.
// Sets related.R.Host's HostGpus accordingly.
func (o *Host) SetHostGpus(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*HostGpu) error {
	query := "update \"host_gpus\" set \"host_id\" = null where \"host_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.HostGpus {
			queries.SetScanner(&rel.HostID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Host = nil
		}

		o.R.HostGpus = nil
	}
	return o.AddHostGpus(ctx, exec, insert, related...)
}

// RemoveHostGpus relationships from objects passed in.
// Removes related items from R.HostGpus (uses pointer comparison, removal does not keep order)
// Sets related.R.Host.
func (o *Host) RemoveHostGpus(ctx context.Context, exec boil.ContextExecutor, related ...*HostGpu) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.HostID, nil)
		if rel.R != nil {
			rel.R.Host = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("host_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.HostGpus {
			if rel != ri {
				continue
			}

			ln := len(o.R.HostGpus)
			if ln > 1 && i < ln-1 {
				o.R.HostGpus[i] = o.R.HostGpus[ln-1]
			}
			o.R.HostGpus = o.R.HostGpus[:ln-1]
			break
		}
	}

	return nil
}

// AddSensorReadings adds the given related objects to the existing relationships
// of the host, optionally inserting them as new records.
// Appends related to o.R.SensorReadings.
// Sets related.R.Host appropriately.
func (o *Host) AddSensorReadings(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SensorReading) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.HostID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"sensor_readings\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"host_id"}),
				strmangle.WhereClause("\"", "\"", 2, sensorReadingPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.HostID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &hostR{
			SensorReadings: related,
		}
	} else {
		o.R.SensorReadings = append(o.R.SensorReadings, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &sensorReadingR{
				Host: o,
			}
		} else {
			rel.R.Host = o
		}
	}
	return nil
}

// SetSensorReadings removes all previously related items of the
// host replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Host's SensorReadings accordingly.
// Replaces o.R.SensorReadings with related.
// Sets related.R.Host's SensorReadings accordingly.
func (o *Host) SetSensorReadings(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SensorReading) error {
	query := "update \"sensor_readings\" set \"host_id\" = null where \"host_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.SensorReadings {
			queries.SetScanner(&rel.HostID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Host = nil
		}

		o.R.SensorReadings = nil
	}
	return o.AddSensorReadings(ctx, exec, insert, related...)
}

// RemoveSensorReadings relationships from objects passed in.
// Removes related items from R.SensorReadings (uses pointer comparison, removal does not keep order)
// Sets related.R.Host.
func (o *Host) RemoveSensorReadings(ctx context.Context, exec boil.ContextExecutor, related ...*SensorReading) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.HostID, nil)
		if rel.R != nil {
			rel.R.Host = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("host_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.SensorReadings {
			if rel != ri {
				continue
			}

			ln := len(o.R.SensorReadings)
			if ln > 1 && i < ln-1 {
				o.R.SensorReadings[i] = o.R.SensorReadings[ln-1]
			}
			o.R.SensorReadings = o.R.SensorReadings[:ln-1]
			break
		}
	}

	return nil
}

// AddSensorModelSensorReadings adds the given related objects to the existing relationships
// of the host, optionally inserting them as new records.
// Appends related to o.R.SensorModelSensorReadings.
// Sets related.R.SensorModel appropriately.
func (o *Host) AddSensorModelSensorReadings(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SensorReading) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.SensorModelID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"sensor_readings\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"sensor_model_id"}),
				strmangle.WhereClause("\"", "\"", 2, sensorReadingPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.SensorModelID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &hostR{
			SensorModelSensorReadings: related,
		}
	} else {
		o.R.SensorModelSensorReadings = append(o.R.SensorModelSensorReadings, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &sensorReadingR{
				SensorModel: o,
			}
		} else {
			rel.R.SensorModel = o
		}
	}
	return nil
}

// SetSensorModelSensorReadings removes all previously related items of the
// host replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.SensorModel's SensorModelSensorReadings accordingly.
// Replaces o.R.SensorModelSensorReadings with related.
// Sets related.R.SensorModel's SensorModelSensorReadings accordingly.
func (o *Host) SetSensorModelSensorReadings(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SensorReading) error {
	query := "update \"sensor_readings\" set \"sensor_model_id\" = null where \"sensor_model_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.SensorModelSensorReadings {
			queries.SetScanner(&rel.SensorModelID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.SensorModel = nil
		}

		o.R.SensorModelSensorReadings = nil
	}
	return o.AddSensorModelSensorReadings(ctx, exec, insert, related...)
}

// RemoveSensorModelSensorReadings relationships from objects passed in.
// Removes related items from R.SensorModelSensorReadings (uses pointer comparison, removal does not keep order)
// Sets related.R.SensorModel.
func (o *Host) RemoveSensorModelSensorReadings(ctx context.Context, exec boil.ContextExecutor, related ...*SensorReading) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.SensorModelID, nil)
		if rel.R != nil {
			rel.R.SensorModel = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("sensor_model_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.SensorModelSensorReadings {
			if rel != ri {
				continue
			}

			ln := len(o.R.SensorModelSensorReadings)
			if ln > 1 && i < ln-1 {
				o.R.SensorModelSensorReadings[i] = o.R.SensorModelSensorReadings[ln-1]
			}
			o.R.SensorModelSensorReadings = o.R.SensorModelSensorReadings[:ln-1]
			break
		}
	}

	return nil
}

// Hosts retrieves all the records using an executor.
func Hosts(mods ...qm.QueryMod) hostQuery {
	mods = append(mods, qm.From("\"hosts\""))
	return hostQuery{NewQuery(mods...)}
}

// FindHost retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindHost(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Host, error) {
	hostObj := &Host{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"hosts\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, hostObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from hosts")
	}

	if err = hostObj.doAfterSelectHooks(ctx, exec); err != nil {
		return hostObj, err
	}

	return hostObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Host) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no hosts provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(hostColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	hostInsertCacheMut.RLock()
	cache, cached := hostInsertCache[key]
	hostInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			hostAllColumns,
			hostColumnsWithDefault,
			hostColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(hostType, hostMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(hostType, hostMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"hosts\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"hosts\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into hosts")
	}

	if !cached {
		hostInsertCacheMut.Lock()
		hostInsertCache[key] = cache
		hostInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Host.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Host) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	hostUpdateCacheMut.RLock()
	cache, cached := hostUpdateCache[key]
	hostUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			hostAllColumns,
			hostPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update hosts, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"hosts\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, hostPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(hostType, hostMapping, append(wl, hostPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update hosts row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for hosts")
	}

	if !cached {
		hostUpdateCacheMut.Lock()
		hostUpdateCache[key] = cache
		hostUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q hostQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for hosts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for hosts")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o HostSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), hostPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"hosts\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, hostPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in host slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all host")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Host) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no hosts provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(hostColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	hostUpsertCacheMut.RLock()
	cache, cached := hostUpsertCache[key]
	hostUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			hostAllColumns,
			hostColumnsWithDefault,
			hostColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			hostAllColumns,
			hostPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert hosts, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(hostPrimaryKeyColumns))
			copy(conflict, hostPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"hosts\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(hostType, hostMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(hostType, hostMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert hosts")
	}

	if !cached {
		hostUpsertCacheMut.Lock()
		hostUpsertCache[key] = cache
		hostUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Host record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Host) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Host provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), hostPrimaryKeyMapping)
	sql := "DELETE FROM \"hosts\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from hosts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for hosts")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q hostQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no hostQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from hosts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for hosts")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o HostSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(hostBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), hostPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"hosts\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, hostPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from host slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for hosts")
	}

	if len(hostAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Host) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindHost(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *HostSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := HostSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), hostPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"hosts\".* FROM \"hosts\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, hostPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in HostSlice")
	}

	*o = slice

	return nil
}

// HostExists checks if the Host row exists.
func HostExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"hosts\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if hosts exists")
	}

	return exists, nil
}
