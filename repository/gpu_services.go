// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// GpuService is an object representing the database table.
type GpuService struct {
	ID          string       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Container   null.String  `boil:"container" json:"container,omitempty" toml:"container" yaml:"container,omitempty"`
	Vram        null.Float64 `boil:"vram" json:"vram,omitempty" toml:"vram" yaml:"vram,omitempty"`
	Health      null.String  `boil:"health" json:"health,omitempty" toml:"health" yaml:"health,omitempty"`
	Concurrent  null.Bool    `boil:"concurrent" json:"concurrent,omitempty" toml:"concurrent" yaml:"concurrent,omitempty"`
	Utilization null.Float64 `boil:"utilization" json:"utilization,omitempty" toml:"utilization" yaml:"utilization,omitempty"`

	R *gpuServiceR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L gpuServiceL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var GpuServiceColumns = struct {
	ID          string
	Container   string
	Vram        string
	Health      string
	Concurrent  string
	Utilization string
}{
	ID:          "id",
	Container:   "container",
	Vram:        "vram",
	Health:      "health",
	Concurrent:  "concurrent",
	Utilization: "utilization",
}

var GpuServiceTableColumns = struct {
	ID          string
	Container   string
	Vram        string
	Health      string
	Concurrent  string
	Utilization string
}{
	ID:          "gpu_services.id",
	Container:   "gpu_services.container",
	Vram:        "gpu_services.vram",
	Health:      "gpu_services.health",
	Concurrent:  "gpu_services.concurrent",
	Utilization: "gpu_services.utilization",
}

// Generated where

type whereHelpernull_Bool struct{ field string }

func (w whereHelpernull_Bool) EQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Bool) NEQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Bool) LT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Bool) LTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Bool) GT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Bool) GTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Bool) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Bool) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var GpuServiceWhere = struct {
	ID          whereHelperstring
	Container   whereHelpernull_String
	Vram        whereHelpernull_Float64
	Health      whereHelpernull_String
	Concurrent  whereHelpernull_Bool
	Utilization whereHelpernull_Float64
}{
	ID:          whereHelperstring{field: "\"gpu_services\".\"id\""},
	Container:   whereHelpernull_String{field: "\"gpu_services\".\"container\""},
	Vram:        whereHelpernull_Float64{field: "\"gpu_services\".\"vram\""},
	Health:      whereHelpernull_String{field: "\"gpu_services\".\"health\""},
	Concurrent:  whereHelpernull_Bool{field: "\"gpu_services\".\"concurrent\""},
	Utilization: whereHelpernull_Float64{field: "\"gpu_services\".\"utilization\""},
}

// GpuServiceRels is where relationship names are stored.
var GpuServiceRels = struct {
	ServiceGpuServiceMount string
	ServiceGpuServicePort  string
	ServiceHostServices    string
}{
	ServiceGpuServiceMount: "ServiceGpuServiceMount",
	ServiceGpuServicePort:  "ServiceGpuServicePort",
	ServiceHostServices:    "ServiceHostServices",
}

// gpuServiceR is where relationships are stored.
type gpuServiceR struct {
	ServiceGpuServiceMount *GpuServiceMount `boil:"ServiceGpuServiceMount" json:"ServiceGpuServiceMount" toml:"ServiceGpuServiceMount" yaml:"ServiceGpuServiceMount"`
	ServiceGpuServicePort  *GpuServicePort  `boil:"ServiceGpuServicePort" json:"ServiceGpuServicePort" toml:"ServiceGpuServicePort" yaml:"ServiceGpuServicePort"`
	ServiceHostServices    HostServiceSlice `boil:"ServiceHostServices" json:"ServiceHostServices" toml:"ServiceHostServices" yaml:"ServiceHostServices"`
}

// NewStruct creates a new relationship struct
func (*gpuServiceR) NewStruct() *gpuServiceR {
	return &gpuServiceR{}
}

// gpuServiceL is where Load methods for each relationship are stored.
type gpuServiceL struct{}

var (
	gpuServiceAllColumns            = []string{"id", "container", "vram", "health", "concurrent", "utilization"}
	gpuServiceColumnsWithoutDefault = []string{}
	gpuServiceColumnsWithDefault    = []string{"id", "container", "vram", "health", "concurrent", "utilization"}
	gpuServicePrimaryKeyColumns     = []string{"id"}
	gpuServiceGeneratedColumns      = []string{}
)

type (
	// GpuServiceSlice is an alias for a slice of pointers to GpuService.
	// This should almost always be used instead of []GpuService.
	GpuServiceSlice []*GpuService
	// GpuServiceHook is the signature for custom GpuService hook methods
	GpuServiceHook func(context.Context, boil.ContextExecutor, *GpuService) error

	gpuServiceQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	gpuServiceType                 = reflect.TypeOf(&GpuService{})
	gpuServiceMapping              = queries.MakeStructMapping(gpuServiceType)
	gpuServicePrimaryKeyMapping, _ = queries.BindMapping(gpuServiceType, gpuServiceMapping, gpuServicePrimaryKeyColumns)
	gpuServiceInsertCacheMut       sync.RWMutex
	gpuServiceInsertCache          = make(map[string]insertCache)
	gpuServiceUpdateCacheMut       sync.RWMutex
	gpuServiceUpdateCache          = make(map[string]updateCache)
	gpuServiceUpsertCacheMut       sync.RWMutex
	gpuServiceUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var gpuServiceAfterSelectHooks []GpuServiceHook

var gpuServiceBeforeInsertHooks []GpuServiceHook
var gpuServiceAfterInsertHooks []GpuServiceHook

var gpuServiceBeforeUpdateHooks []GpuServiceHook
var gpuServiceAfterUpdateHooks []GpuServiceHook

var gpuServiceBeforeDeleteHooks []GpuServiceHook
var gpuServiceAfterDeleteHooks []GpuServiceHook

var gpuServiceBeforeUpsertHooks []GpuServiceHook
var gpuServiceAfterUpsertHooks []GpuServiceHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *GpuService) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gpuServiceAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *GpuService) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gpuServiceBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *GpuService) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gpuServiceAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *GpuService) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gpuServiceBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *GpuService) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gpuServiceAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *GpuService) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gpuServiceBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *GpuService) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gpuServiceAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *GpuService) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gpuServiceBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *GpuService) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gpuServiceAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddGpuServiceHook registers your hook function for all future operations.
func AddGpuServiceHook(hookPoint boil.HookPoint, gpuServiceHook GpuServiceHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		gpuServiceAfterSelectHooks = append(gpuServiceAfterSelectHooks, gpuServiceHook)
	case boil.BeforeInsertHook:
		gpuServiceBeforeInsertHooks = append(gpuServiceBeforeInsertHooks, gpuServiceHook)
	case boil.AfterInsertHook:
		gpuServiceAfterInsertHooks = append(gpuServiceAfterInsertHooks, gpuServiceHook)
	case boil.BeforeUpdateHook:
		gpuServiceBeforeUpdateHooks = append(gpuServiceBeforeUpdateHooks, gpuServiceHook)
	case boil.AfterUpdateHook:
		gpuServiceAfterUpdateHooks = append(gpuServiceAfterUpdateHooks, gpuServiceHook)
	case boil.BeforeDeleteHook:
		gpuServiceBeforeDeleteHooks = append(gpuServiceBeforeDeleteHooks, gpuServiceHook)
	case boil.AfterDeleteHook:
		gpuServiceAfterDeleteHooks = append(gpuServiceAfterDeleteHooks, gpuServiceHook)
	case boil.BeforeUpsertHook:
		gpuServiceBeforeUpsertHooks = append(gpuServiceBeforeUpsertHooks, gpuServiceHook)
	case boil.AfterUpsertHook:
		gpuServiceAfterUpsertHooks = append(gpuServiceAfterUpsertHooks, gpuServiceHook)
	}
}

// One returns a single gpuService record from the query.
func (q gpuServiceQuery) One(ctx context.Context, exec boil.ContextExecutor) (*GpuService, error) {
	o := &GpuService{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for gpu_services")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all GpuService records from the query.
func (q gpuServiceQuery) All(ctx context.Context, exec boil.ContextExecutor) (GpuServiceSlice, error) {
	var o []*GpuService

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to GpuService slice")
	}

	if len(gpuServiceAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all GpuService records in the query.
func (q gpuServiceQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count gpu_services rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q gpuServiceQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if gpu_services exists")
	}

	return count > 0, nil
}

// ServiceGpuServiceMount pointed to by the foreign key.
func (o *GpuService) ServiceGpuServiceMount(mods ...qm.QueryMod) gpuServiceMountQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"service_id\" = ?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	query := GpuServiceMounts(queryMods...)
	queries.SetFrom(query.Query, "\"gpu_service_mounts\"")

	return query
}

// ServiceGpuServicePort pointed to by the foreign key.
func (o *GpuService) ServiceGpuServicePort(mods ...qm.QueryMod) gpuServicePortQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"service_id\" = ?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	query := GpuServicePorts(queryMods...)
	queries.SetFrom(query.Query, "\"gpu_service_ports\"")

	return query
}

// ServiceHostServices retrieves all the host_service's HostServices with an executor via service_id column.
func (o *GpuService) ServiceHostServices(mods ...qm.QueryMod) hostServiceQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"host_services\".\"service_id\"=?", o.ID),
	)

	query := HostServices(queryMods...)
	queries.SetFrom(query.Query, "\"host_services\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"host_services\".*"})
	}

	return query
}

// LoadServiceGpuServiceMount allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (gpuServiceL) LoadServiceGpuServiceMount(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGpuService interface{}, mods queries.Applicator) error {
	var slice []*GpuService
	var object *GpuService

	if singular {
		object = maybeGpuService.(*GpuService)
	} else {
		slice = *maybeGpuService.(*[]*GpuService)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &gpuServiceR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &gpuServiceR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`gpu_service_mounts`),
		qm.WhereIn(`gpu_service_mounts.service_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load GpuServiceMount")
	}

	var resultSlice []*GpuServiceMount
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice GpuServiceMount")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for gpu_service_mounts")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for gpu_service_mounts")
	}

	if len(gpuServiceAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ServiceGpuServiceMount = foreign
		if foreign.R == nil {
			foreign.R = &gpuServiceMountR{}
		}
		foreign.R.Service = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ID == foreign.ServiceID {
				local.R.ServiceGpuServiceMount = foreign
				if foreign.R == nil {
					foreign.R = &gpuServiceMountR{}
				}
				foreign.R.Service = local
				break
			}
		}
	}

	return nil
}

// LoadServiceGpuServicePort allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (gpuServiceL) LoadServiceGpuServicePort(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGpuService interface{}, mods queries.Applicator) error {
	var slice []*GpuService
	var object *GpuService

	if singular {
		object = maybeGpuService.(*GpuService)
	} else {
		slice = *maybeGpuService.(*[]*GpuService)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &gpuServiceR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &gpuServiceR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`gpu_service_ports`),
		qm.WhereIn(`gpu_service_ports.service_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load GpuServicePort")
	}

	var resultSlice []*GpuServicePort
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice GpuServicePort")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for gpu_service_ports")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for gpu_service_ports")
	}

	if len(gpuServiceAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ServiceGpuServicePort = foreign
		if foreign.R == nil {
			foreign.R = &gpuServicePortR{}
		}
		foreign.R.Service = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ID == foreign.ServiceID {
				local.R.ServiceGpuServicePort = foreign
				if foreign.R == nil {
					foreign.R = &gpuServicePortR{}
				}
				foreign.R.Service = local
				break
			}
		}
	}

	return nil
}

// LoadServiceHostServices allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (gpuServiceL) LoadServiceHostServices(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGpuService interface{}, mods queries.Applicator) error {
	var slice []*GpuService
	var object *GpuService

	if singular {
		object = maybeGpuService.(*GpuService)
	} else {
		slice = *maybeGpuService.(*[]*GpuService)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &gpuServiceR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &gpuServiceR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`host_services`),
		qm.WhereIn(`host_services.service_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load host_services")
	}

	var resultSlice []*HostService
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice host_services")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on host_services")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for host_services")
	}

	if len(hostServiceAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ServiceHostServices = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &hostServiceR{}
			}
			foreign.R.Service = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ServiceID {
				local.R.ServiceHostServices = append(local.R.ServiceHostServices, foreign)
				if foreign.R == nil {
					foreign.R = &hostServiceR{}
				}
				foreign.R.Service = local
				break
			}
		}
	}

	return nil
}

// SetServiceGpuServiceMount of the gpuService to the related item.
// Sets o.R.ServiceGpuServiceMount to related.
// Adds o to related.R.Service.
func (o *GpuService) SetServiceGpuServiceMount(ctx context.Context, exec boil.ContextExecutor, insert bool, related *GpuServiceMount) error {
	var err error

	if insert {
		related.ServiceID = o.ID

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"gpu_service_mounts\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"service_id"}),
			strmangle.WhereClause("\"", "\"", 2, gpuServiceMountPrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.ServiceID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, updateQuery)
			fmt.Fprintln(writer, values)
		}
		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.ServiceID = o.ID

	}

	if o.R == nil {
		o.R = &gpuServiceR{
			ServiceGpuServiceMount: related,
		}
	} else {
		o.R.ServiceGpuServiceMount = related
	}

	if related.R == nil {
		related.R = &gpuServiceMountR{
			Service: o,
		}
	} else {
		related.R.Service = o
	}
	return nil
}

// SetServiceGpuServicePort of the gpuService to the related item.
// Sets o.R.ServiceGpuServicePort to related.
// Adds o to related.R.Service.
func (o *GpuService) SetServiceGpuServicePort(ctx context.Context, exec boil.ContextExecutor, insert bool, related *GpuServicePort) error {
	var err error

	if insert {
		related.ServiceID = o.ID

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"gpu_service_ports\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"service_id"}),
			strmangle.WhereClause("\"", "\"", 2, gpuServicePortPrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.ServiceID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, updateQuery)
			fmt.Fprintln(writer, values)
		}
		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.ServiceID = o.ID

	}

	if o.R == nil {
		o.R = &gpuServiceR{
			ServiceGpuServicePort: related,
		}
	} else {
		o.R.ServiceGpuServicePort = related
	}

	if related.R == nil {
		related.R = &gpuServicePortR{
			Service: o,
		}
	} else {
		related.R.Service = o
	}
	return nil
}

// AddServiceHostServices adds the given related objects to the existing relationships
// of the gpu_service, optionally inserting them as new records.
// Appends related to o.R.ServiceHostServices.
// Sets related.R.Service appropriately.
func (o *GpuService) AddServiceHostServices(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*HostService) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ServiceID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"host_services\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"service_id"}),
				strmangle.WhereClause("\"", "\"", 2, hostServicePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.HostID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ServiceID = o.ID
		}
	}

	if o.R == nil {
		o.R = &gpuServiceR{
			ServiceHostServices: related,
		}
	} else {
		o.R.ServiceHostServices = append(o.R.ServiceHostServices, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &hostServiceR{
				Service: o,
			}
		} else {
			rel.R.Service = o
		}
	}
	return nil
}

// GpuServices retrieves all the records using an executor.
func GpuServices(mods ...qm.QueryMod) gpuServiceQuery {
	mods = append(mods, qm.From("\"gpu_services\""))
	return gpuServiceQuery{NewQuery(mods...)}
}

// FindGpuService retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindGpuService(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*GpuService, error) {
	gpuServiceObj := &GpuService{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"gpu_services\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, gpuServiceObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from gpu_services")
	}

	if err = gpuServiceObj.doAfterSelectHooks(ctx, exec); err != nil {
		return gpuServiceObj, err
	}

	return gpuServiceObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *GpuService) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no gpu_services provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(gpuServiceColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	gpuServiceInsertCacheMut.RLock()
	cache, cached := gpuServiceInsertCache[key]
	gpuServiceInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			gpuServiceAllColumns,
			gpuServiceColumnsWithDefault,
			gpuServiceColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(gpuServiceType, gpuServiceMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(gpuServiceType, gpuServiceMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"gpu_services\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"gpu_services\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into gpu_services")
	}

	if !cached {
		gpuServiceInsertCacheMut.Lock()
		gpuServiceInsertCache[key] = cache
		gpuServiceInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the GpuService.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *GpuService) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	gpuServiceUpdateCacheMut.RLock()
	cache, cached := gpuServiceUpdateCache[key]
	gpuServiceUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			gpuServiceAllColumns,
			gpuServicePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update gpu_services, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"gpu_services\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, gpuServicePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(gpuServiceType, gpuServiceMapping, append(wl, gpuServicePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update gpu_services row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for gpu_services")
	}

	if !cached {
		gpuServiceUpdateCacheMut.Lock()
		gpuServiceUpdateCache[key] = cache
		gpuServiceUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q gpuServiceQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for gpu_services")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for gpu_services")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o GpuServiceSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), gpuServicePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"gpu_services\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, gpuServicePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in gpuService slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all gpuService")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *GpuService) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no gpu_services provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(gpuServiceColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	gpuServiceUpsertCacheMut.RLock()
	cache, cached := gpuServiceUpsertCache[key]
	gpuServiceUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			gpuServiceAllColumns,
			gpuServiceColumnsWithDefault,
			gpuServiceColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			gpuServiceAllColumns,
			gpuServicePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert gpu_services, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(gpuServicePrimaryKeyColumns))
			copy(conflict, gpuServicePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"gpu_services\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(gpuServiceType, gpuServiceMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(gpuServiceType, gpuServiceMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert gpu_services")
	}

	if !cached {
		gpuServiceUpsertCacheMut.Lock()
		gpuServiceUpsertCache[key] = cache
		gpuServiceUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single GpuService record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *GpuService) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no GpuService provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), gpuServicePrimaryKeyMapping)
	sql := "DELETE FROM \"gpu_services\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from gpu_services")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for gpu_services")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q gpuServiceQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no gpuServiceQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from gpu_services")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for gpu_services")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o GpuServiceSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(gpuServiceBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), gpuServicePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"gpu_services\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, gpuServicePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from gpuService slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for gpu_services")
	}

	if len(gpuServiceAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *GpuService) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindGpuService(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *GpuServiceSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := GpuServiceSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), gpuServicePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"gpu_services\".* FROM \"gpu_services\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, gpuServicePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in GpuServiceSlice")
	}

	*o = slice

	return nil
}

// GpuServiceExists checks if the GpuService row exists.
func GpuServiceExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"gpu_services\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if gpu_services exists")
	}

	return exists, nil
}
