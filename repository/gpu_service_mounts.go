// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// GpuServiceMount is an object representing the database table.
type GpuServiceMount struct {
	ServiceID     string      `boil:"service_id" json:"service_id" toml:"service_id" yaml:"service_id"`
	HostPath      null.String `boil:"host_path" json:"host_path,omitempty" toml:"host_path" yaml:"host_path,omitempty"`
	ContainerPath null.String `boil:"container_path" json:"container_path,omitempty" toml:"container_path" yaml:"container_path,omitempty"`

	R *gpuServiceMountR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L gpuServiceMountL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var GpuServiceMountColumns = struct {
	ServiceID     string
	HostPath      string
	ContainerPath string
}{
	ServiceID:     "service_id",
	HostPath:      "host_path",
	ContainerPath: "container_path",
}

var GpuServiceMountTableColumns = struct {
	ServiceID     string
	HostPath      string
	ContainerPath string
}{
	ServiceID:     "gpu_service_mounts.service_id",
	HostPath:      "gpu_service_mounts.host_path",
	ContainerPath: "gpu_service_mounts.container_path",
}

// Generated where

var GpuServiceMountWhere = struct {
	ServiceID     whereHelperstring
	HostPath      whereHelpernull_String
	ContainerPath whereHelpernull_String
}{
	ServiceID:     whereHelperstring{field: "\"gpu_service_mounts\".\"service_id\""},
	HostPath:      whereHelpernull_String{field: "\"gpu_service_mounts\".\"host_path\""},
	ContainerPath: whereHelpernull_String{field: "\"gpu_service_mounts\".\"container_path\""},
}

// GpuServiceMountRels is where relationship names are stored.
var GpuServiceMountRels = struct {
	Service string
}{
	Service: "Service",
}

// gpuServiceMountR is where relationships are stored.
type gpuServiceMountR struct {
	Service *GpuService `boil:"Service" json:"Service" toml:"Service" yaml:"Service"`
}

// NewStruct creates a new relationship struct
func (*gpuServiceMountR) NewStruct() *gpuServiceMountR {
	return &gpuServiceMountR{}
}

// gpuServiceMountL is where Load methods for each relationship are stored.
type gpuServiceMountL struct{}

var (
	gpuServiceMountAllColumns            = []string{"service_id", "host_path", "container_path"}
	gpuServiceMountColumnsWithoutDefault = []string{"service_id"}
	gpuServiceMountColumnsWithDefault    = []string{"host_path", "container_path"}
	gpuServiceMountPrimaryKeyColumns     = []string{"service_id"}
	gpuServiceMountGeneratedColumns      = []string{}
)

type (
	// GpuServiceMountSlice is an alias for a slice of pointers to GpuServiceMount.
	// This should almost always be used instead of []GpuServiceMount.
	GpuServiceMountSlice []*GpuServiceMount
	// GpuServiceMountHook is the signature for custom GpuServiceMount hook methods
	GpuServiceMountHook func(context.Context, boil.ContextExecutor, *GpuServiceMount) error

	gpuServiceMountQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	gpuServiceMountType                 = reflect.TypeOf(&GpuServiceMount{})
	gpuServiceMountMapping              = queries.MakeStructMapping(gpuServiceMountType)
	gpuServiceMountPrimaryKeyMapping, _ = queries.BindMapping(gpuServiceMountType, gpuServiceMountMapping, gpuServiceMountPrimaryKeyColumns)
	gpuServiceMountInsertCacheMut       sync.RWMutex
	gpuServiceMountInsertCache          = make(map[string]insertCache)
	gpuServiceMountUpdateCacheMut       sync.RWMutex
	gpuServiceMountUpdateCache          = make(map[string]updateCache)
	gpuServiceMountUpsertCacheMut       sync.RWMutex
	gpuServiceMountUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var gpuServiceMountAfterSelectHooks []GpuServiceMountHook

var gpuServiceMountBeforeInsertHooks []GpuServiceMountHook
var gpuServiceMountAfterInsertHooks []GpuServiceMountHook

var gpuServiceMountBeforeUpdateHooks []GpuServiceMountHook
var gpuServiceMountAfterUpdateHooks []GpuServiceMountHook

var gpuServiceMountBeforeDeleteHooks []GpuServiceMountHook
var gpuServiceMountAfterDeleteHooks []GpuServiceMountHook

var gpuServiceMountBeforeUpsertHooks []GpuServiceMountHook
var gpuServiceMountAfterUpsertHooks []GpuServiceMountHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *GpuServiceMount) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gpuServiceMountAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *GpuServiceMount) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gpuServiceMountBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *GpuServiceMount) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gpuServiceMountAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *GpuServiceMount) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gpuServiceMountBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *GpuServiceMount) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gpuServiceMountAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *GpuServiceMount) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gpuServiceMountBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *GpuServiceMount) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gpuServiceMountAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *GpuServiceMount) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gpuServiceMountBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *GpuServiceMount) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gpuServiceMountAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddGpuServiceMountHook registers your hook function for all future operations.
func AddGpuServiceMountHook(hookPoint boil.HookPoint, gpuServiceMountHook GpuServiceMountHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		gpuServiceMountAfterSelectHooks = append(gpuServiceMountAfterSelectHooks, gpuServiceMountHook)
	case boil.BeforeInsertHook:
		gpuServiceMountBeforeInsertHooks = append(gpuServiceMountBeforeInsertHooks, gpuServiceMountHook)
	case boil.AfterInsertHook:
		gpuServiceMountAfterInsertHooks = append(gpuServiceMountAfterInsertHooks, gpuServiceMountHook)
	case boil.BeforeUpdateHook:
		gpuServiceMountBeforeUpdateHooks = append(gpuServiceMountBeforeUpdateHooks, gpuServiceMountHook)
	case boil.AfterUpdateHook:
		gpuServiceMountAfterUpdateHooks = append(gpuServiceMountAfterUpdateHooks, gpuServiceMountHook)
	case boil.BeforeDeleteHook:
		gpuServiceMountBeforeDeleteHooks = append(gpuServiceMountBeforeDeleteHooks, gpuServiceMountHook)
	case boil.AfterDeleteHook:
		gpuServiceMountAfterDeleteHooks = append(gpuServiceMountAfterDeleteHooks, gpuServiceMountHook)
	case boil.BeforeUpsertHook:
		gpuServiceMountBeforeUpsertHooks = append(gpuServiceMountBeforeUpsertHooks, gpuServiceMountHook)
	case boil.AfterUpsertHook:
		gpuServiceMountAfterUpsertHooks = append(gpuServiceMountAfterUpsertHooks, gpuServiceMountHook)
	}
}

// One returns a single gpuServiceMount record from the query.
func (q gpuServiceMountQuery) One(ctx context.Context, exec boil.ContextExecutor) (*GpuServiceMount, error) {
	o := &GpuServiceMount{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for gpu_service_mounts")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all GpuServiceMount records from the query.
func (q gpuServiceMountQuery) All(ctx context.Context, exec boil.ContextExecutor) (GpuServiceMountSlice, error) {
	var o []*GpuServiceMount

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to GpuServiceMount slice")
	}

	if len(gpuServiceMountAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all GpuServiceMount records in the query.
func (q gpuServiceMountQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count gpu_service_mounts rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q gpuServiceMountQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if gpu_service_mounts exists")
	}

	return count > 0, nil
}

// Service pointed to by the foreign key.
func (o *GpuServiceMount) Service(mods ...qm.QueryMod) gpuServiceQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ServiceID),
	}

	queryMods = append(queryMods, mods...)

	query := GpuServices(queryMods...)
	queries.SetFrom(query.Query, "\"gpu_services\"")

	return query
}

// LoadService allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (gpuServiceMountL) LoadService(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGpuServiceMount interface{}, mods queries.Applicator) error {
	var slice []*GpuServiceMount
	var object *GpuServiceMount

	if singular {
		object = maybeGpuServiceMount.(*GpuServiceMount)
	} else {
		slice = *maybeGpuServiceMount.(*[]*GpuServiceMount)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &gpuServiceMountR{}
		}
		args = append(args, object.ServiceID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &gpuServiceMountR{}
			}

			for _, a := range args {
				if a == obj.ServiceID {
					continue Outer
				}
			}

			args = append(args, obj.ServiceID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`gpu_services`),
		qm.WhereIn(`gpu_services.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load GpuService")
	}

	var resultSlice []*GpuService
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice GpuService")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for gpu_services")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for gpu_services")
	}

	if len(gpuServiceMountAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Service = foreign
		if foreign.R == nil {
			foreign.R = &gpuServiceR{}
		}
		foreign.R.ServiceGpuServiceMount = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ServiceID == foreign.ID {
				local.R.Service = foreign
				if foreign.R == nil {
					foreign.R = &gpuServiceR{}
				}
				foreign.R.ServiceGpuServiceMount = local
				break
			}
		}
	}

	return nil
}

// SetService of the gpuServiceMount to the related item.
// Sets o.R.Service to related.
// Adds o to related.R.ServiceGpuServiceMount.
func (o *GpuServiceMount) SetService(ctx context.Context, exec boil.ContextExecutor, insert bool, related *GpuService) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"gpu_service_mounts\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"service_id"}),
		strmangle.WhereClause("\"", "\"", 2, gpuServiceMountPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ServiceID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ServiceID = related.ID
	if o.R == nil {
		o.R = &gpuServiceMountR{
			Service: related,
		}
	} else {
		o.R.Service = related
	}

	if related.R == nil {
		related.R = &gpuServiceR{
			ServiceGpuServiceMount: o,
		}
	} else {
		related.R.ServiceGpuServiceMount = o
	}

	return nil
}

// GpuServiceMounts retrieves all the records using an executor.
func GpuServiceMounts(mods ...qm.QueryMod) gpuServiceMountQuery {
	mods = append(mods, qm.From("\"gpu_service_mounts\""))
	return gpuServiceMountQuery{NewQuery(mods...)}
}

// FindGpuServiceMount retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindGpuServiceMount(ctx context.Context, exec boil.ContextExecutor, serviceID string, selectCols ...string) (*GpuServiceMount, error) {
	gpuServiceMountObj := &GpuServiceMount{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"gpu_service_mounts\" where \"service_id\"=$1", sel,
	)

	q := queries.Raw(query, serviceID)

	err := q.Bind(ctx, exec, gpuServiceMountObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from gpu_service_mounts")
	}

	if err = gpuServiceMountObj.doAfterSelectHooks(ctx, exec); err != nil {
		return gpuServiceMountObj, err
	}

	return gpuServiceMountObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *GpuServiceMount) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no gpu_service_mounts provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(gpuServiceMountColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	gpuServiceMountInsertCacheMut.RLock()
	cache, cached := gpuServiceMountInsertCache[key]
	gpuServiceMountInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			gpuServiceMountAllColumns,
			gpuServiceMountColumnsWithDefault,
			gpuServiceMountColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(gpuServiceMountType, gpuServiceMountMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(gpuServiceMountType, gpuServiceMountMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"gpu_service_mounts\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"gpu_service_mounts\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into gpu_service_mounts")
	}

	if !cached {
		gpuServiceMountInsertCacheMut.Lock()
		gpuServiceMountInsertCache[key] = cache
		gpuServiceMountInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the GpuServiceMount.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *GpuServiceMount) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	gpuServiceMountUpdateCacheMut.RLock()
	cache, cached := gpuServiceMountUpdateCache[key]
	gpuServiceMountUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			gpuServiceMountAllColumns,
			gpuServiceMountPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update gpu_service_mounts, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"gpu_service_mounts\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, gpuServiceMountPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(gpuServiceMountType, gpuServiceMountMapping, append(wl, gpuServiceMountPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update gpu_service_mounts row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for gpu_service_mounts")
	}

	if !cached {
		gpuServiceMountUpdateCacheMut.Lock()
		gpuServiceMountUpdateCache[key] = cache
		gpuServiceMountUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q gpuServiceMountQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for gpu_service_mounts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for gpu_service_mounts")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o GpuServiceMountSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), gpuServiceMountPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"gpu_service_mounts\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, gpuServiceMountPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in gpuServiceMount slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all gpuServiceMount")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *GpuServiceMount) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no gpu_service_mounts provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(gpuServiceMountColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	gpuServiceMountUpsertCacheMut.RLock()
	cache, cached := gpuServiceMountUpsertCache[key]
	gpuServiceMountUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			gpuServiceMountAllColumns,
			gpuServiceMountColumnsWithDefault,
			gpuServiceMountColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			gpuServiceMountAllColumns,
			gpuServiceMountPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert gpu_service_mounts, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(gpuServiceMountPrimaryKeyColumns))
			copy(conflict, gpuServiceMountPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"gpu_service_mounts\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(gpuServiceMountType, gpuServiceMountMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(gpuServiceMountType, gpuServiceMountMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert gpu_service_mounts")
	}

	if !cached {
		gpuServiceMountUpsertCacheMut.Lock()
		gpuServiceMountUpsertCache[key] = cache
		gpuServiceMountUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single GpuServiceMount record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *GpuServiceMount) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no GpuServiceMount provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), gpuServiceMountPrimaryKeyMapping)
	sql := "DELETE FROM \"gpu_service_mounts\" WHERE \"service_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from gpu_service_mounts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for gpu_service_mounts")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q gpuServiceMountQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no gpuServiceMountQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from gpu_service_mounts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for gpu_service_mounts")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o GpuServiceMountSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(gpuServiceMountBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), gpuServiceMountPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"gpu_service_mounts\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, gpuServiceMountPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from gpuServiceMount slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for gpu_service_mounts")
	}

	if len(gpuServiceMountAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *GpuServiceMount) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindGpuServiceMount(ctx, exec, o.ServiceID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *GpuServiceMountSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := GpuServiceMountSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), gpuServiceMountPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"gpu_service_mounts\".* FROM \"gpu_service_mounts\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, gpuServiceMountPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in GpuServiceMountSlice")
	}

	*o = slice

	return nil
}

// GpuServiceMountExists checks if the GpuServiceMount row exists.
func GpuServiceMountExists(ctx context.Context, exec boil.ContextExecutor, serviceID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"gpu_service_mounts\" where \"service_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, serviceID)
	}
	row := exec.QueryRowContext(ctx, sql, serviceID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if gpu_service_mounts exists")
	}

	return exists, nil
}
