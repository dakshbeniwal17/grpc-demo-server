// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: services.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GrpcDemoClient is the client API for GrpcDemo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GrpcDemoClient interface {
	GetMessage(ctx context.Context, in *GetMessageRequest, opts ...grpc.CallOption) (*GetMessageResponse, error)
	CreateHost(ctx context.Context, in *CreateHostRequest, opts ...grpc.CallOption) (*CreateHostResponse, error)
	CreateGpuModel(ctx context.Context, in *CreateGpuModelRequest, opts ...grpc.CallOption) (*CreateGpuModelResponse, error)
	UpdateGpuModel(ctx context.Context, in *UpdateGpuModelRequest, opts ...grpc.CallOption) (*UpdateGpuModelResponse, error)
	GetGpuModel(ctx context.Context, in *GetGpuModelRequest, opts ...grpc.CallOption) (*GetGpuModelResponse, error)
	GetGpuModels(ctx context.Context, in *GetGpuModelsRequest, opts ...grpc.CallOption) (*GetGpuModelsResponse, error)
}

type grpcDemoClient struct {
	cc grpc.ClientConnInterface
}

func NewGrpcDemoClient(cc grpc.ClientConnInterface) GrpcDemoClient {
	return &grpcDemoClient{cc}
}

func (c *grpcDemoClient) GetMessage(ctx context.Context, in *GetMessageRequest, opts ...grpc.CallOption) (*GetMessageResponse, error) {
	out := new(GetMessageResponse)
	err := c.cc.Invoke(ctx, "/pb.GrpcDemo/GetMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcDemoClient) CreateHost(ctx context.Context, in *CreateHostRequest, opts ...grpc.CallOption) (*CreateHostResponse, error) {
	out := new(CreateHostResponse)
	err := c.cc.Invoke(ctx, "/pb.GrpcDemo/CreateHost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcDemoClient) CreateGpuModel(ctx context.Context, in *CreateGpuModelRequest, opts ...grpc.CallOption) (*CreateGpuModelResponse, error) {
	out := new(CreateGpuModelResponse)
	err := c.cc.Invoke(ctx, "/pb.GrpcDemo/CreateGpuModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcDemoClient) UpdateGpuModel(ctx context.Context, in *UpdateGpuModelRequest, opts ...grpc.CallOption) (*UpdateGpuModelResponse, error) {
	out := new(UpdateGpuModelResponse)
	err := c.cc.Invoke(ctx, "/pb.GrpcDemo/UpdateGpuModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcDemoClient) GetGpuModel(ctx context.Context, in *GetGpuModelRequest, opts ...grpc.CallOption) (*GetGpuModelResponse, error) {
	out := new(GetGpuModelResponse)
	err := c.cc.Invoke(ctx, "/pb.GrpcDemo/GetGpuModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcDemoClient) GetGpuModels(ctx context.Context, in *GetGpuModelsRequest, opts ...grpc.CallOption) (*GetGpuModelsResponse, error) {
	out := new(GetGpuModelsResponse)
	err := c.cc.Invoke(ctx, "/pb.GrpcDemo/GetGpuModels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GrpcDemoServer is the server API for GrpcDemo service.
// All implementations must embed UnimplementedGrpcDemoServer
// for forward compatibility
type GrpcDemoServer interface {
	GetMessage(context.Context, *GetMessageRequest) (*GetMessageResponse, error)
	CreateHost(context.Context, *CreateHostRequest) (*CreateHostResponse, error)
	CreateGpuModel(context.Context, *CreateGpuModelRequest) (*CreateGpuModelResponse, error)
	UpdateGpuModel(context.Context, *UpdateGpuModelRequest) (*UpdateGpuModelResponse, error)
	GetGpuModel(context.Context, *GetGpuModelRequest) (*GetGpuModelResponse, error)
	GetGpuModels(context.Context, *GetGpuModelsRequest) (*GetGpuModelsResponse, error)
	mustEmbedUnimplementedGrpcDemoServer()
}

// UnimplementedGrpcDemoServer must be embedded to have forward compatible implementations.
type UnimplementedGrpcDemoServer struct {
}

func (UnimplementedGrpcDemoServer) GetMessage(context.Context, *GetMessageRequest) (*GetMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessage not implemented")
}
func (UnimplementedGrpcDemoServer) CreateHost(context.Context, *CreateHostRequest) (*CreateHostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHost not implemented")
}
func (UnimplementedGrpcDemoServer) CreateGpuModel(context.Context, *CreateGpuModelRequest) (*CreateGpuModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGpuModel not implemented")
}
func (UnimplementedGrpcDemoServer) UpdateGpuModel(context.Context, *UpdateGpuModelRequest) (*UpdateGpuModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGpuModel not implemented")
}
func (UnimplementedGrpcDemoServer) GetGpuModel(context.Context, *GetGpuModelRequest) (*GetGpuModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGpuModel not implemented")
}
func (UnimplementedGrpcDemoServer) GetGpuModels(context.Context, *GetGpuModelsRequest) (*GetGpuModelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGpuModels not implemented")
}
func (UnimplementedGrpcDemoServer) mustEmbedUnimplementedGrpcDemoServer() {}

// UnsafeGrpcDemoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GrpcDemoServer will
// result in compilation errors.
type UnsafeGrpcDemoServer interface {
	mustEmbedUnimplementedGrpcDemoServer()
}

func RegisterGrpcDemoServer(s grpc.ServiceRegistrar, srv GrpcDemoServer) {
	s.RegisterService(&GrpcDemo_ServiceDesc, srv)
}

func _GrpcDemo_GetMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcDemoServer).GetMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GrpcDemo/GetMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcDemoServer).GetMessage(ctx, req.(*GetMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcDemo_CreateHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcDemoServer).CreateHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GrpcDemo/CreateHost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcDemoServer).CreateHost(ctx, req.(*CreateHostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcDemo_CreateGpuModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGpuModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcDemoServer).CreateGpuModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GrpcDemo/CreateGpuModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcDemoServer).CreateGpuModel(ctx, req.(*CreateGpuModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcDemo_UpdateGpuModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGpuModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcDemoServer).UpdateGpuModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GrpcDemo/UpdateGpuModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcDemoServer).UpdateGpuModel(ctx, req.(*UpdateGpuModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcDemo_GetGpuModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGpuModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcDemoServer).GetGpuModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GrpcDemo/GetGpuModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcDemoServer).GetGpuModel(ctx, req.(*GetGpuModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcDemo_GetGpuModels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGpuModelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcDemoServer).GetGpuModels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GrpcDemo/GetGpuModels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcDemoServer).GetGpuModels(ctx, req.(*GetGpuModelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GrpcDemo_ServiceDesc is the grpc.ServiceDesc for GrpcDemo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GrpcDemo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.GrpcDemo",
	HandlerType: (*GrpcDemoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMessage",
			Handler:    _GrpcDemo_GetMessage_Handler,
		},
		{
			MethodName: "CreateHost",
			Handler:    _GrpcDemo_CreateHost_Handler,
		},
		{
			MethodName: "CreateGpuModel",
			Handler:    _GrpcDemo_CreateGpuModel_Handler,
		},
		{
			MethodName: "UpdateGpuModel",
			Handler:    _GrpcDemo_UpdateGpuModel_Handler,
		},
		{
			MethodName: "GetGpuModel",
			Handler:    _GrpcDemo_GetGpuModel_Handler,
		},
		{
			MethodName: "GetGpuModels",
			Handler:    _GrpcDemo_GetGpuModels_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services.proto",
}
